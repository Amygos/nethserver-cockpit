{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NethServer Cockpit developer guide This guide describes how Cockpit is used inside NethServer and how to develop a new NethServer Cockpit module. Guidelines Developer environment API guidelines UI guidelines Internationalization References Server Manager API Application manifest Build Building RPM Building documentation Create new module If you haven't used Cockpit before, be sure to check out the Cockpit Guide , as it explains Cockpit foundamentals. Once you're familiar with that process, you may proceed with this guide. To start the development of new NethServer Cockpit module: Read project Guidelines Prepare the Environment Scaffold your application","title":"Home"},{"location":"#nethserver-cockpit-developer-guide","text":"This guide describes how Cockpit is used inside NethServer and how to develop a new NethServer Cockpit module.","title":"NethServer Cockpit developer guide"},{"location":"#guidelines","text":"Developer environment API guidelines UI guidelines Internationalization","title":"Guidelines"},{"location":"#references","text":"Server Manager API Application manifest","title":"References"},{"location":"#build","text":"Building RPM Building documentation","title":"Build"},{"location":"#create-new-module","text":"If you haven't used Cockpit before, be sure to check out the Cockpit Guide , as it explains Cockpit foundamentals. Once you're familiar with that process, you may proceed with this guide. To start the development of new NethServer Cockpit module: Read project Guidelines Prepare the Environment Scaffold your application","title":"Create new module"},{"location":"api_guidelines/","text":"Design guidelines Each cockpit module has its own helpers implementing a set API to read and write the configuration and to execute actions. All helpers are saved inside /usr/libexec/nethserver/api/ controller_name / directory. Each helper: must be an executable file, it can be written in any language depending on the task Example: /usr/libexec/nethserver/system-openssh/read . uses JSON format for input and output; the JSON can must be read as input from STDIN and printed to STDOUT can use other helpers to execute multiple actions, the helpers can be placed in the same directory (eg. /usr/libexec/nethserver/openssh/help1-read ) APIs should implement classical CRUD operations, plus a validation helper: create read update delete validate None of the above action is mandatory. create Usually used when managing tables, it create a new record and apply the configuration. read update delete validate","title":"Design guidelines"},{"location":"api_guidelines/#design-guidelines","text":"Each cockpit module has its own helpers implementing a set API to read and write the configuration and to execute actions. All helpers are saved inside /usr/libexec/nethserver/api/ controller_name / directory. Each helper: must be an executable file, it can be written in any language depending on the task Example: /usr/libexec/nethserver/system-openssh/read . uses JSON format for input and output; the JSON can must be read as input from STDIN and printed to STDOUT can use other helpers to execute multiple actions, the helpers can be placed in the same directory (eg. /usr/libexec/nethserver/openssh/help1-read ) APIs should implement classical CRUD operations, plus a validation helper: create read update delete validate None of the above action is mandatory.","title":"Design guidelines"},{"location":"api_guidelines/#create","text":"Usually used when managing tables, it create a new record and apply the configuration.","title":"create"},{"location":"api_guidelines/#read","text":"","title":"read"},{"location":"api_guidelines/#update","text":"","title":"update"},{"location":"api_guidelines/#delete","text":"","title":"delete"},{"location":"api_guidelines/#validate","text":"","title":"validate"},{"location":"api_libraries/","text":"Helper libraries TODO","title":"Helper libraries"},{"location":"api_libraries/#helper-libraries","text":"TODO","title":"Helper libraries"},{"location":"api_protocol/","text":"Communication protocol The API and the UI talk to each other using JSON and the communication protocol defines a set of a well-known objects. Esmith db records Objects passed to and returned by APIs must reflect esmith db format and respect the upper/lower case notation of property names: { key : objKey , type : objType , props : { FirstProp : FirstPropValue , ... } } Please note that key and type field are reserved. Example Host goofy inside the hosts database. Original esmith db notation: goofy=local Description=Goofy workstation IpAddress=192.168.1.22 Equivalent JavaScript object notation: var goofy = { key: goofy , type: local , Description: Goofy workstation , IpAddress: 192.168.1.22 , } Errors If something goes wrong, APIs must throw a nethserver.Error object, which describes the error reason and possibly why the object passed to the API function caused the error. For instance: throw new nethserver.Error({ id: 1507721123244, type: NotValid , message: Generic validation error reason , attributes: { MyProp1 : field-specific error reason , MyProp2 : other field-specific error reason } }); The message property should be used if an error is not caused by a specific attribute. On the other hand, there could be cases where the attributes object is empty, or undefined because the error condition does not depend on any of the attributes or attributes are not defined at all. Note that the same Error object could represent multiple failure reasons. How to generate a good id in JavaScript: + new Date() An equivalent for Bash: $ date +%s Well-known errors Well-known errors are: Validation error: NotValid throw new nethserver.Error({ id: 1507721123244, type: 'NotValid', message: 'Generic validation error reason', attributes: {'myProp': 'field-specific error reason'} }); Not found error: NotFound throw new nethserver.Error({ id: 1507721155244, type: 'NotFound', message: 'Generic validation error reason', attributes: {'key': 'field-specific error reason'} }); type ValidatorFailed : validator procedure error - the validate command failed","title":"Communication protocol"},{"location":"api_protocol/#communication-protocol","text":"The API and the UI talk to each other using JSON and the communication protocol defines a set of a well-known objects.","title":"Communication protocol"},{"location":"api_protocol/#esmith-db-records","text":"Objects passed to and returned by APIs must reflect esmith db format and respect the upper/lower case notation of property names: { key : objKey , type : objType , props : { FirstProp : FirstPropValue , ... } } Please note that key and type field are reserved.","title":"Esmith db records"},{"location":"api_protocol/#example","text":"Host goofy inside the hosts database. Original esmith db notation: goofy=local Description=Goofy workstation IpAddress=192.168.1.22 Equivalent JavaScript object notation: var goofy = { key: goofy , type: local , Description: Goofy workstation , IpAddress: 192.168.1.22 , }","title":"Example"},{"location":"api_protocol/#errors","text":"If something goes wrong, APIs must throw a nethserver.Error object, which describes the error reason and possibly why the object passed to the API function caused the error. For instance: throw new nethserver.Error({ id: 1507721123244, type: NotValid , message: Generic validation error reason , attributes: { MyProp1 : field-specific error reason , MyProp2 : other field-specific error reason } }); The message property should be used if an error is not caused by a specific attribute. On the other hand, there could be cases where the attributes object is empty, or undefined because the error condition does not depend on any of the attributes or attributes are not defined at all. Note that the same Error object could represent multiple failure reasons. How to generate a good id in JavaScript: + new Date() An equivalent for Bash: $ date +%s","title":"Errors"},{"location":"api_protocol/#well-known-errors","text":"Well-known errors are: Validation error: NotValid throw new nethserver.Error({ id: 1507721123244, type: 'NotValid', message: 'Generic validation error reason', attributes: {'myProp': 'field-specific error reason'} }); Not found error: NotFound throw new nethserver.Error({ id: 1507721155244, type: 'NotFound', message: 'Generic validation error reason', attributes: {'key': 'field-specific error reason'} }); type ValidatorFailed : validator procedure error - the validate command failed","title":"Well-known errors"},{"location":"application_manifest/","text":"Application manifest Applications are described by a JSON manifest inspired to AppData and NPM package.json formats. The manifest is used both for generating the \"Applications\" page and for a future App store. Manifest must be placed under /usr/share/cockpit/nethserver/applications directory and named with the application id like id .json ; Format id : this tag contains the unique identifier for this application (required) name : descriptive name of the application (required) summary : describe what is the purpose of the application in few words (required) description : include 2-3 paragraphs describing any important features. Each line should be an element of the array. Supports markdown format. (recommended) icon : name of the icon file; the icon should be 256x256px (recommended) screenshots : a list of screenshots; all screenshots should have a 16:9 aspect ratio, and should have a width that is no smaller than 620px (optional) url : link to local application installation. (required for web applications) homepage : this is a recommended tag for link project official site (optional) release : define the version and release date of this application (recommended) provides : list of provided RPM packages (optional) tags : list of keywords to help people discover content of the application (optional) license : license of the application, please pick one from SPDX list (recommended) bugs : the url of project's issue tracker and / or the email address to which issues should be reported (optional) author : the name of of the author with optional email and urls fields. (recommended) Images like screenshots and icons must be placed under /usr/share/cockpit/ application-id /assets directory. Example File /usr/share/cockpit/nethserver/applications/nextcloud.json : { id : nethserver-netxtcloud , name : NextCloud , summary : Share your data , description : [ Access, **share** and protect your files, calendars, contacts, communication more at home and in your enterprise. , Nextcloud puts your data at your fingertips, under your control. ], icon : icon.png , screenshots : [ { caption : Login , image : login.png }, { caption : Share data , image : data.png } ], url : /nextcloud , homepage : http://www.nextcloud.org , provides : [ nextcloud , nethserver-nextcloud ], release : { version : 12.0.2 }, tags : [ cloud , files , share ], license : GPL-3.0 , bugs : { url : https://github.com/owner/project/issues , email : project@hostname.com }, author : { name : Nextcloud , url : https://nextcloud.com , email : info@nextcloud.com } }","title":"Application manifest"},{"location":"application_manifest/#application-manifest","text":"Applications are described by a JSON manifest inspired to AppData and NPM package.json formats. The manifest is used both for generating the \"Applications\" page and for a future App store. Manifest must be placed under /usr/share/cockpit/nethserver/applications directory and named with the application id like id .json ;","title":"Application manifest"},{"location":"application_manifest/#format","text":"id : this tag contains the unique identifier for this application (required) name : descriptive name of the application (required) summary : describe what is the purpose of the application in few words (required) description : include 2-3 paragraphs describing any important features. Each line should be an element of the array. Supports markdown format. (recommended) icon : name of the icon file; the icon should be 256x256px (recommended) screenshots : a list of screenshots; all screenshots should have a 16:9 aspect ratio, and should have a width that is no smaller than 620px (optional) url : link to local application installation. (required for web applications) homepage : this is a recommended tag for link project official site (optional) release : define the version and release date of this application (recommended) provides : list of provided RPM packages (optional) tags : list of keywords to help people discover content of the application (optional) license : license of the application, please pick one from SPDX list (recommended) bugs : the url of project's issue tracker and / or the email address to which issues should be reported (optional) author : the name of of the author with optional email and urls fields. (recommended) Images like screenshots and icons must be placed under /usr/share/cockpit/ application-id /assets directory.","title":"Format"},{"location":"application_manifest/#example","text":"File /usr/share/cockpit/nethserver/applications/nextcloud.json : { id : nethserver-netxtcloud , name : NextCloud , summary : Share your data , description : [ Access, **share** and protect your files, calendars, contacts, communication more at home and in your enterprise. , Nextcloud puts your data at your fingertips, under your control. ], icon : icon.png , screenshots : [ { caption : Login , image : login.png }, { caption : Share data , image : data.png } ], url : /nextcloud , homepage : http://www.nextcloud.org , provides : [ nextcloud , nethserver-nextcloud ], release : { version : 12.0.2 }, tags : [ cloud , files , share ], license : GPL-3.0 , bugs : { url : https://github.com/owner/project/issues , email : project@hostname.com }, author : { name : Nextcloud , url : https://nextcloud.com , email : info@nextcloud.com } }","title":"Example"},{"location":"build_doc/","text":"Building documentation This guide has been built using MkDocs . Follow mkdocs installation instructions , or just use: pip install --user mkdocs mkdocs-material To serve the documentation during the development use: cd docs mkdocs serve Publish to GitHub pages To build and public the documentation directly to GitHub pages: cd docs mkdocs gh-deploy","title":"Building documentation"},{"location":"build_doc/#building-documentation","text":"This guide has been built using MkDocs . Follow mkdocs installation instructions , or just use: pip install --user mkdocs mkdocs-material To serve the documentation during the development use: cd docs mkdocs serve","title":"Building documentation"},{"location":"build_doc/#publish-to-github-pages","text":"To build and public the documentation directly to GitHub pages: cd docs mkdocs gh-deploy","title":"Publish to GitHub pages"},{"location":"build_rpm/","text":"Building RPM Move to the root directory of cloned repository and use standard make-rpms NethServer tool: ./prep-sources make-rpms Install RPM Copy the rpm to the NethServer Access the NethServer, then download COPR repository: wget https://copr.fedorainfracloud.org/coprs/g/cockpit/cockpit-preview/repo/epel-7/group_cockpit-cockpit-preview-epel-7.repo -O /etc/yum.repos.d/cockpit.repo yum install nethserver-cockpit*rpm","title":"Building RPM"},{"location":"build_rpm/#building-rpm","text":"Move to the root directory of cloned repository and use standard make-rpms NethServer tool: ./prep-sources make-rpms","title":"Building RPM"},{"location":"build_rpm/#install-rpm","text":"Copy the rpm to the NethServer Access the NethServer, then download COPR repository: wget https://copr.fedorainfracloud.org/coprs/g/cockpit/cockpit-preview/repo/epel-7/group_cockpit-cockpit-preview-epel-7.repo -O /etc/yum.repos.d/cockpit.repo yum install nethserver-cockpit*rpm","title":"Install RPM"},{"location":"environment/","text":"Development environment Index Install requirements Code style Build API and UI Sync API and UI The development environment can be prepared on a Fedora or CentOS 7 machine. Follow these steps: prepare the environment do your modification to API or UI sync your modification to the server where cockpit is running Install requirements Prepare the development environment: Install developer tools: npm and git On Fedora: dnf install npm git On CentOS: yum install npm git Clone the repository: git clone git@github.com:NethServer/nethserver-cockpit Install grunt globally: npm install -g grunt-cli bower generator-angular yo You can ignore warnings like this: WARN generator-angular@0.16.0 requires a peer of generator-karma@ =0.9.0 but none was installed. Enter inside the cloned repository and install all dependencies: ``` cd nethserver-cockpit/ cd api/ npm install cd .. cd ui/system/ npm install bower install ``` Build API and UI Enter API directory and build using grunt: cd api/system/ grunt build Enter UI directory and build using grunt: cd ui/ grunt build You can ignore ignore warnings like this: npm WARN api @1.0.0 No repository field . npm WARN api @1.0.0 No license field . Sync API and UI Files can be copied using rsync. While UI could be synced without executing the build task each time, make sure API is always built before sync. Use the following commands: ssh root @192.168.1.20 mkdir -p ~/.local/share/cockpit/nethserver cd api / grunt build rsync : root @192.168.1.20 cd ui / system grunt rsync : root @192.168.1.20 Code style Please use configuration from EditorConfig: http://editorconfig.org","title":"Development environment"},{"location":"environment/#development-environment","text":"Index Install requirements Code style Build API and UI Sync API and UI The development environment can be prepared on a Fedora or CentOS 7 machine. Follow these steps: prepare the environment do your modification to API or UI sync your modification to the server where cockpit is running","title":"Development environment"},{"location":"environment/#install-requirements","text":"Prepare the development environment: Install developer tools: npm and git On Fedora: dnf install npm git On CentOS: yum install npm git Clone the repository: git clone git@github.com:NethServer/nethserver-cockpit Install grunt globally: npm install -g grunt-cli bower generator-angular yo You can ignore warnings like this: WARN generator-angular@0.16.0 requires a peer of generator-karma@ =0.9.0 but none was installed. Enter inside the cloned repository and install all dependencies: ``` cd nethserver-cockpit/ cd api/ npm install cd .. cd ui/system/ npm install bower install ```","title":"Install requirements"},{"location":"environment/#build-api-and-ui","text":"Enter API directory and build using grunt: cd api/system/ grunt build Enter UI directory and build using grunt: cd ui/ grunt build You can ignore ignore warnings like this: npm WARN api @1.0.0 No repository field . npm WARN api @1.0.0 No license field .","title":"Build API and UI"},{"location":"environment/#sync-api-and-ui","text":"Files can be copied using rsync. While UI could be synced without executing the build task each time, make sure API is always built before sync. Use the following commands: ssh root @192.168.1.20 mkdir -p ~/.local/share/cockpit/nethserver cd api / grunt build rsync : root @192.168.1.20 cd ui / system grunt rsync : root @192.168.1.20","title":"Sync API and UI"},{"location":"environment/#code-style","text":"Please use configuration from EditorConfig: http://editorconfig.org","title":"Code style"},{"location":"new_module/","text":"How to write a new module A NethServer Cockpit module is composed by 3 main parts: Web interface: a mix of HTML and CSS which presents data loaded using JavaScript Cockpit or NethServer API Package files: manifest and RPM spec file to create an installable package Translation files (optional) To scaffold a new module use NethServer Cockpit Generator for Yeoman . Install required tools Let's assume you've already prepared your own development environment , you can now proceed by installing Yeoman and generator-nethserver-cockpit using npm : npm install -g yo npm install -g generator-nethserver-cockpit Create When scaffolding a new module, Yeoman will create the whole structure of a new NethServer Cockpit application, including all files needed for building an RPM. First, create a new directory for your project: mkdir -p nethserver-cockpit-dummy Then execute Yeoman and follow instructions on the screen specifying a meaningful project name: cd nethserver-cockpit-dummy yo nethserver-cockpit Customize Edit all application metadata inside the manifest: root/usr/share/cockpit/nethserver/applications/nethserver-cockpit-dummy.json It's now time to start implementing some nice feature, you just need to know HTML, CSS and some JavaScript basics: there is no need to learn a new framework, use whatever you like. The source code must be placed inside the app directory: index.html : main HTML template, it already contains 3 sections: module dashboard on the top application metadata on the right settings on the center styles/main.css : application stylesheet, customize your custom CSS but always follow UI guidelines scripts/app.js : JavaScript logic goes here. If you need to develop complex API, take a loot to API guidelines assets/icon.png : an icon for your application, we suggest to use a PNG image, 256 x 256 pixel You can ignore i18n/po.tpl , manifest.json and override.json files which are used for Cockpit internals. The module will be installed inside /usr/share/cockpit/ project directory. Metadata will be copied inside /usr/share/nethserver/applications directory. A new application card named as your project will be added to the \"Applications\" page. JavaScript frameworks In case you really want to pick a JavaScript framework, just include it inside index.html . The prep-sources script will do all the magic for you and include all needed dependencies. AngularJS (https://angularjs.org/): html ng-app ... script src= https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js /script Vue (https://vuejs.org/): script src= https://unpkg.com/vue /script React (https://reactjs.org/): script crossorigin src = https://unpkg.com/react@16/umd/react.production.min.js / script script crossorigin src = https://unpkg.com/react-dom@16/umd/react-dom.production.min.js / script Save your work The code should always be kept under a version control system for tracking changes. NethServer build system assumes you're using git , so commit everything on a git repository: git init git add * git commit -a -m First import Always consider to share your code, take a look at GitHub . Build and test NethServer provides a set of tool for building RPMs under CentOS or Fedora. Prepare the build environment , then create the RPM for your module: ./prep-sources make-rpms nethserver-cockpit-dummy.spec Copy the created RPM into your machine and install it to try out your new application by accessing Cockpit: https:// your_server :9090 If some JavaScript or HTML part doesn't load correctly, execute: systemctl restart cockpit","title":"How to write a new module"},{"location":"new_module/#how-to-write-a-new-module","text":"A NethServer Cockpit module is composed by 3 main parts: Web interface: a mix of HTML and CSS which presents data loaded using JavaScript Cockpit or NethServer API Package files: manifest and RPM spec file to create an installable package Translation files (optional) To scaffold a new module use NethServer Cockpit Generator for Yeoman .","title":"How to write a new module"},{"location":"new_module/#install-required-tools","text":"Let's assume you've already prepared your own development environment , you can now proceed by installing Yeoman and generator-nethserver-cockpit using npm : npm install -g yo npm install -g generator-nethserver-cockpit","title":"Install required tools"},{"location":"new_module/#create","text":"When scaffolding a new module, Yeoman will create the whole structure of a new NethServer Cockpit application, including all files needed for building an RPM. First, create a new directory for your project: mkdir -p nethserver-cockpit-dummy Then execute Yeoman and follow instructions on the screen specifying a meaningful project name: cd nethserver-cockpit-dummy yo nethserver-cockpit","title":"Create"},{"location":"new_module/#customize","text":"Edit all application metadata inside the manifest: root/usr/share/cockpit/nethserver/applications/nethserver-cockpit-dummy.json It's now time to start implementing some nice feature, you just need to know HTML, CSS and some JavaScript basics: there is no need to learn a new framework, use whatever you like. The source code must be placed inside the app directory: index.html : main HTML template, it already contains 3 sections: module dashboard on the top application metadata on the right settings on the center styles/main.css : application stylesheet, customize your custom CSS but always follow UI guidelines scripts/app.js : JavaScript logic goes here. If you need to develop complex API, take a loot to API guidelines assets/icon.png : an icon for your application, we suggest to use a PNG image, 256 x 256 pixel You can ignore i18n/po.tpl , manifest.json and override.json files which are used for Cockpit internals. The module will be installed inside /usr/share/cockpit/ project directory. Metadata will be copied inside /usr/share/nethserver/applications directory. A new application card named as your project will be added to the \"Applications\" page.","title":"Customize"},{"location":"new_module/#javascript-frameworks","text":"In case you really want to pick a JavaScript framework, just include it inside index.html . The prep-sources script will do all the magic for you and include all needed dependencies. AngularJS (https://angularjs.org/): html ng-app ... script src= https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js /script Vue (https://vuejs.org/): script src= https://unpkg.com/vue /script React (https://reactjs.org/): script crossorigin src = https://unpkg.com/react@16/umd/react.production.min.js / script script crossorigin src = https://unpkg.com/react-dom@16/umd/react-dom.production.min.js / script","title":"JavaScript frameworks"},{"location":"new_module/#save-your-work","text":"The code should always be kept under a version control system for tracking changes. NethServer build system assumes you're using git , so commit everything on a git repository: git init git add * git commit -a -m First import Always consider to share your code, take a look at GitHub .","title":"Save your work"},{"location":"new_module/#build-and-test","text":"NethServer provides a set of tool for building RPMs under CentOS or Fedora. Prepare the build environment , then create the RPM for your module: ./prep-sources make-rpms nethserver-cockpit-dummy.spec Copy the created RPM into your machine and install it to try out your new application by accessing Cockpit: https:// your_server :9090 If some JavaScript or HTML part doesn't load correctly, execute: systemctl restart cockpit","title":"Build and test"},{"location":"ui_guidelines/","text":"UI guidelines Index UI design Left menu Applications Forms Notifications Accessibility UI design The whole web UI is designed following PatternFly patterns. Please, read carefully PatternFly documentation before starting the design of a new web page. The main goal is to have a consistent design and behavior across all modules. All web page should guide the user to well-defined and specific task like: bad task example: \"The user must choose the correct account provider\" good task example: \"The user must choose Active Directory provider if ACLs on shared folders are a functional requirements\" Left menu The left menu should be considered fixed: modules shouldn't add items inside the left menu. When a module needs to add a new feature, the web page should be added inside exiting sections like \"System\". Applications The Applications page is a container of each new module which implements new features, like mail server, nextcloud, etc. Each new application web page should display: the status of the application status on the top a list of common actions just below the status all configuration parameters (forms, table, etc.) in the center On first run, the application must display a modal wizard if the module can't be configured with a reasonable defaults. Also the web page should display suggestions to help the user to follow best practices. For example, inside the \"Certificate page\", the interface should display a suggestion to enable Let's Encrypt if a self-signed certificate is used as default. Each application must be described by a JSON manifest inspired to AppData freedesktop.org format. Forms A configuration form should always display the minimum number of fields needed to configure the feature. Extra parameters should be hidden inside an Advanced panel with reasonable defaults. For example, when creating a user you need at least the user name, the full name and the password; but you could hide extra details like street address or phone number. Also it is a good practice to add a \"Description\" when creating records inside tables. Notifications NethServer Cockpit provides multiple toast notification . Each notification can have one of these states: success : everything is ok. Transient: it stays on the screen for 8 seconds. danger : something went wrong. Not transient: it stays on the screen until the user explicitly close it. May require an action link. warning : something needs attention. Not transient: it stays on the screen until the user explicitly close it. The notification can also have a type: info : display only a message action : display a message and an action link Finally there also is a task notification, it stays on the screen until the task has been completed. This kind of notification can be created only by signal-event . Example Raise a notification after 5 seconds; add this code to app.js : setTimeout(function() { nethserver.notificationMonitor.dispatchEvent( nsnotification , { type: action , title: Failed , message: Test failing notification , status: danger , action: Retry , method: function() { console.log( this method is called when the link is clicked! ); } }); }, 5000); Modals Modal overlay should be provided any time the user needs to enter data on a form and press \"Save\" button to change system configuration. See also Modal Overlay for extra use cases. Accessibility We need to evaluate how PatternFly copes with people suffering of low vision, who need to access most features using the keyboard shortcuts.","title":"UI guidelines"},{"location":"ui_guidelines/#ui-guidelines","text":"Index UI design Left menu Applications Forms Notifications Accessibility","title":"UI guidelines"},{"location":"ui_guidelines/#ui-design","text":"The whole web UI is designed following PatternFly patterns. Please, read carefully PatternFly documentation before starting the design of a new web page. The main goal is to have a consistent design and behavior across all modules. All web page should guide the user to well-defined and specific task like: bad task example: \"The user must choose the correct account provider\" good task example: \"The user must choose Active Directory provider if ACLs on shared folders are a functional requirements\"","title":"UI design"},{"location":"ui_guidelines/#left-menu","text":"The left menu should be considered fixed: modules shouldn't add items inside the left menu. When a module needs to add a new feature, the web page should be added inside exiting sections like \"System\".","title":"Left menu"},{"location":"ui_guidelines/#applications","text":"The Applications page is a container of each new module which implements new features, like mail server, nextcloud, etc. Each new application web page should display: the status of the application status on the top a list of common actions just below the status all configuration parameters (forms, table, etc.) in the center On first run, the application must display a modal wizard if the module can't be configured with a reasonable defaults. Also the web page should display suggestions to help the user to follow best practices. For example, inside the \"Certificate page\", the interface should display a suggestion to enable Let's Encrypt if a self-signed certificate is used as default. Each application must be described by a JSON manifest inspired to AppData freedesktop.org format.","title":"Applications"},{"location":"ui_guidelines/#forms","text":"A configuration form should always display the minimum number of fields needed to configure the feature. Extra parameters should be hidden inside an Advanced panel with reasonable defaults. For example, when creating a user you need at least the user name, the full name and the password; but you could hide extra details like street address or phone number. Also it is a good practice to add a \"Description\" when creating records inside tables.","title":"Forms"},{"location":"ui_guidelines/#notifications","text":"NethServer Cockpit provides multiple toast notification . Each notification can have one of these states: success : everything is ok. Transient: it stays on the screen for 8 seconds. danger : something went wrong. Not transient: it stays on the screen until the user explicitly close it. May require an action link. warning : something needs attention. Not transient: it stays on the screen until the user explicitly close it. The notification can also have a type: info : display only a message action : display a message and an action link Finally there also is a task notification, it stays on the screen until the task has been completed. This kind of notification can be created only by signal-event .","title":"Notifications"},{"location":"ui_guidelines/#example","text":"Raise a notification after 5 seconds; add this code to app.js : setTimeout(function() { nethserver.notificationMonitor.dispatchEvent( nsnotification , { type: action , title: Failed , message: Test failing notification , status: danger , action: Retry , method: function() { console.log( this method is called when the link is clicked! ); } }); }, 5000);","title":"Example"},{"location":"ui_guidelines/#modals","text":"Modal overlay should be provided any time the user needs to enter data on a form and press \"Save\" button to change system configuration. See also Modal Overlay for extra use cases.","title":"Modals"},{"location":"ui_guidelines/#accessibility","text":"We need to evaluate how PatternFly copes with people suffering of low vision, who need to access most features using the keyboard shortcuts.","title":"Accessibility"},{"location":"api/system-aliases/","text":"system-alias Read and write system DNS system alias. read List current configured aliases. Output The configuration contains an array of alias records (type self from hosts db). Output example: { status : , configuration : [ { props : { Description : }, name : alias1.neth.loc , type : self } ] } validate Validate a collection of alias records. Constraints the alias name must be a valid FQDN Input Use the read output as input. Each record must have the type set to self , the Description field is currently not used. Example: { configuration : [ { props : { Description : }, name : test3.nethserver.org , type : self }, { props : { Description : }, name : test2.nethserver.org , type : self } ] } Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.nethserver.org , type : self }, { props :{ Description : }, name : test2.nethserver.org , type : self }]} | ./validate update All alias are destroyed and recreated on update. The helper should be invoked once, after all alias has been modified. Input The same from validate helper. Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.neth.eu , type : self }, { props :{ Description : }, name : test2.neth.eu , type : self }]} | ./update","title":"system-alias"},{"location":"api/system-aliases/#system-alias","text":"Read and write system DNS system alias.","title":"system-alias"},{"location":"api/system-aliases/#read","text":"List current configured aliases.","title":"read"},{"location":"api/system-aliases/#output","text":"The configuration contains an array of alias records (type self from hosts db). Output example: { status : , configuration : [ { props : { Description : }, name : alias1.neth.loc , type : self } ] }","title":"Output"},{"location":"api/system-aliases/#validate","text":"Validate a collection of alias records.","title":"validate"},{"location":"api/system-aliases/#constraints","text":"the alias name must be a valid FQDN","title":"Constraints"},{"location":"api/system-aliases/#input","text":"Use the read output as input. Each record must have the type set to self , the Description field is currently not used. Example: { configuration : [ { props : { Description : }, name : test3.nethserver.org , type : self }, { props : { Description : }, name : test2.nethserver.org , type : self } ] } Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.nethserver.org , type : self }, { props :{ Description : }, name : test2.nethserver.org , type : self }]} | ./validate","title":"Input"},{"location":"api/system-aliases/#update","text":"All alias are destroyed and recreated on update. The helper should be invoked once, after all alias has been modified.","title":"update"},{"location":"api/system-aliases/#input_1","text":"The same from validate helper. Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.neth.eu , type : self }, { props :{ Description : }, name : test2.neth.eu , type : self }]} | ./update","title":"Input"},{"location":"api/system-certificate/","text":"system-certificate Manage system certificates. Supported operations: list certificates show certificate content configure Let's Encrypt configure self-signed certificate set default certificate read List all available certificates. Input If no input has been provided, the helper will return the list of all available certificates. To retrieve a certificate, use: { name : } Output List Uses /usr/libexec/nethserver/cert-list helper. Example: { status : , configuration : { /etc/pki/tls/certs/NSRV.crt : { cn : NethServer, O=Example Org, ST=SomeState, OU=Main , file : /etc/pki/tls/certs/NSRV.crt , default : 1 , issuer : NethServer, O=Example Org, ST=SomeState, OU=Main , key : /etc/pki/tls/private/NSRV.key , chain : , expiration_t : 1795129200 , expired : 0 } } } Certificate content Uses /usr/libexec/nethserver/pki-info helper. Output is base64 encoded: { certificate : Q2Vyd .... } validate Constraints Validate 3 different actions: lets-encrypt upload self-signed The action must be specified inside the JSON action field. Example: { action : upload , ... } Constraints for self-signed : CountryCode: empty or 2 letters State, Locality, Organization, OrganizationalUnitName, CommonName: valid x509 fields EmailAddress: emptyr or valid mail address SubjectAltName: comma-separeted list of FQDNs Constraints for lets-encrypt : LetsEncryptMail: empty or valid mail address LetsEncryptDomains: comma-separeted list of FQDNs Check all Let's Encrypt conditions are met Constraints for upload : certificate: valid x509 certificate chain: valid x509 certificate key: valid key for running tlspolicy Input self-signed action must be set to self-signed pki record in json format Example: { props : { LetsEncryptMail : , SubjectAltName : t1.test.net,t2.test.net , KeyFile : , CrtFile : , State : myState , EmailAddress : , ChainFile : , Organization : My company , CertificateDuration : 3650 , Locality : , LetsEncryptDomains : test.local.net , CommonName : , LetsEncryptRenewDays : 30 , LetsEncrypt : disabled , CountryCode : it , OrganizationalUnitName : }, name : pki , type : configuration , action : lets-encrypt } lets-encrypt action must be set to lets-encrypt pki record in json format Example: { props : { LetsEncryptMail : , SubjectAltName : , KeyFile : , CrtFile : , State : , EmailAddress : , ChainFile : , Organization : , CertificateDuration : 3650 , Locality : , LetsEncryptDomains : test.local.net , CommonName : , LetsEncryptRenewDays : 30 , LetsEncrypt : disabled , CountryCode : it , OrganizationalUnitName : }, name : pki , type : configuration , action : lets-encrypt } Warning: the UI shouldn't change the LetsEncrypt field. upload Format: action must be set to upload name is mandatory and set the name for the uploaded certs certificate , key and chain must contain base64 encoded data the chain field can be empty { action : upload , files : { name : mycert , certificate : ... , key : ... , chain : ... } } update Available actions: self-signed lets-encrypt upload set-default self-signed, lets-encrypt, upload Same input from validate. set-default Same input from self-signed, but the UI must set at least CrtFile and KeyFile . The ChainFile property is optional.","title":"system-certificate"},{"location":"api/system-certificate/#system-certificate","text":"Manage system certificates. Supported operations: list certificates show certificate content configure Let's Encrypt configure self-signed certificate set default certificate","title":"system-certificate"},{"location":"api/system-certificate/#read","text":"List all available certificates.","title":"read"},{"location":"api/system-certificate/#input","text":"If no input has been provided, the helper will return the list of all available certificates. To retrieve a certificate, use: { name : }","title":"Input"},{"location":"api/system-certificate/#output","text":"","title":"Output"},{"location":"api/system-certificate/#list","text":"Uses /usr/libexec/nethserver/cert-list helper. Example: { status : , configuration : { /etc/pki/tls/certs/NSRV.crt : { cn : NethServer, O=Example Org, ST=SomeState, OU=Main , file : /etc/pki/tls/certs/NSRV.crt , default : 1 , issuer : NethServer, O=Example Org, ST=SomeState, OU=Main , key : /etc/pki/tls/private/NSRV.key , chain : , expiration_t : 1795129200 , expired : 0 } } }","title":"List"},{"location":"api/system-certificate/#certificate-content","text":"Uses /usr/libexec/nethserver/pki-info helper. Output is base64 encoded: { certificate : Q2Vyd .... }","title":"Certificate content"},{"location":"api/system-certificate/#validate","text":"","title":"validate"},{"location":"api/system-certificate/#constraints","text":"Validate 3 different actions: lets-encrypt upload self-signed The action must be specified inside the JSON action field. Example: { action : upload , ... } Constraints for self-signed : CountryCode: empty or 2 letters State, Locality, Organization, OrganizationalUnitName, CommonName: valid x509 fields EmailAddress: emptyr or valid mail address SubjectAltName: comma-separeted list of FQDNs Constraints for lets-encrypt : LetsEncryptMail: empty or valid mail address LetsEncryptDomains: comma-separeted list of FQDNs Check all Let's Encrypt conditions are met Constraints for upload : certificate: valid x509 certificate chain: valid x509 certificate key: valid key for running tlspolicy","title":"Constraints"},{"location":"api/system-certificate/#input_1","text":"","title":"Input"},{"location":"api/system-certificate/#self-signed","text":"action must be set to self-signed pki record in json format Example: { props : { LetsEncryptMail : , SubjectAltName : t1.test.net,t2.test.net , KeyFile : , CrtFile : , State : myState , EmailAddress : , ChainFile : , Organization : My company , CertificateDuration : 3650 , Locality : , LetsEncryptDomains : test.local.net , CommonName : , LetsEncryptRenewDays : 30 , LetsEncrypt : disabled , CountryCode : it , OrganizationalUnitName : }, name : pki , type : configuration , action : lets-encrypt }","title":"self-signed"},{"location":"api/system-certificate/#lets-encrypt","text":"action must be set to lets-encrypt pki record in json format Example: { props : { LetsEncryptMail : , SubjectAltName : , KeyFile : , CrtFile : , State : , EmailAddress : , ChainFile : , Organization : , CertificateDuration : 3650 , Locality : , LetsEncryptDomains : test.local.net , CommonName : , LetsEncryptRenewDays : 30 , LetsEncrypt : disabled , CountryCode : it , OrganizationalUnitName : }, name : pki , type : configuration , action : lets-encrypt } Warning: the UI shouldn't change the LetsEncrypt field.","title":"lets-encrypt"},{"location":"api/system-certificate/#upload","text":"Format: action must be set to upload name is mandatory and set the name for the uploaded certs certificate , key and chain must contain base64 encoded data the chain field can be empty { action : upload , files : { name : mycert , certificate : ... , key : ... , chain : ... } }","title":"upload"},{"location":"api/system-certificate/#update","text":"Available actions: self-signed lets-encrypt upload set-default","title":"update"},{"location":"api/system-certificate/#self-signed-lets-encrypt-upload","text":"Same input from validate.","title":"self-signed, lets-encrypt, upload"},{"location":"api/system-certificate/#set-default","text":"Same input from self-signed, but the UI must set at least CrtFile and KeyFile . The ChainFile property is optional.","title":"set-default"},{"location":"api/system-company/","text":"system-company Read ans set OrganizationContact record from configuration db. read Output The configuration key contains the OrganizationContact record. Output example: { status : , configuration : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration } } validate Constraints Company must not empty Input Input: an esmith db record in JSON format. Input example from: config getjson OrganizationContact : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration } write Same input from validate helper.","title":"system-company"},{"location":"api/system-company/#system-company","text":"Read ans set OrganizationContact record from configuration db.","title":"system-company"},{"location":"api/system-company/#read","text":"","title":"read"},{"location":"api/system-company/#output","text":"The configuration key contains the OrganizationContact record. Output example: { status : , configuration : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration } }","title":"Output"},{"location":"api/system-company/#validate","text":"","title":"validate"},{"location":"api/system-company/#constraints","text":"Company must not empty","title":"Constraints"},{"location":"api/system-company/#input","text":"Input: an esmith db record in JSON format. Input example from: config getjson OrganizationContact : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration }","title":"Input"},{"location":"api/system-company/#write","text":"Same input from validate helper.","title":"write"},{"location":"api/system-dns/","text":"system-dns Read and set upstream DNS servers for DNSMasq. read Input Return the value of NameServers record from configuration db. The record is inside the the configuration field: { status : , configuration : { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } } validate Constraints Nameservers must be a comma-separeted list of valid IPv4 addresses Input The NameServers record from `configuration esmith db record in JSON format. The NameServers property is a comma-separated list of IP address. It must contain at least one element. Example: { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } Validation example: echo { props :{ NameServers : 8.8.8.8 }, name : dns , type : configuration } | ./validate write Same input from validate helper.","title":"system-dns"},{"location":"api/system-dns/#system-dns","text":"Read and set upstream DNS servers for DNSMasq.","title":"system-dns"},{"location":"api/system-dns/#read","text":"","title":"read"},{"location":"api/system-dns/#input","text":"Return the value of NameServers record from configuration db. The record is inside the the configuration field: { status : , configuration : { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } }","title":"Input"},{"location":"api/system-dns/#validate","text":"","title":"validate"},{"location":"api/system-dns/#constraints","text":"Nameservers must be a comma-separeted list of valid IPv4 addresses","title":"Constraints"},{"location":"api/system-dns/#input_1","text":"The NameServers record from `configuration esmith db record in JSON format. The NameServers property is a comma-separated list of IP address. It must contain at least one element. Example: { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } Validation example: echo { props :{ NameServers : 8.8.8.8 }, name : dns , type : configuration } | ./validate","title":"Input"},{"location":"api/system-dns/#write","text":"Same input from validate helper.","title":"write"},{"location":"api/system-hostname/","text":"system-hostname Read and the set the system hostname. read Return the system hostname. Output Example: { hostname : myserver.test.local } validate Constraints Must be at least a second-level domain Can't be localhost.localdomain Validate against myhostname system-validator Input Takes the same output from read: { hostname : myserver.test.local } Invocation example: echo { hostname : localhost.localdomain } | ./validate update Input Takes the same input from validate.","title":"system-hostname"},{"location":"api/system-hostname/#system-hostname","text":"Read and the set the system hostname.","title":"system-hostname"},{"location":"api/system-hostname/#read","text":"Return the system hostname.","title":"read"},{"location":"api/system-hostname/#output","text":"Example: { hostname : myserver.test.local }","title":"Output"},{"location":"api/system-hostname/#validate","text":"","title":"validate"},{"location":"api/system-hostname/#constraints","text":"Must be at least a second-level domain Can't be localhost.localdomain Validate against myhostname system-validator","title":"Constraints"},{"location":"api/system-hostname/#input","text":"Takes the same output from read: { hostname : myserver.test.local } Invocation example: echo { hostname : localhost.localdomain } | ./validate","title":"Input"},{"location":"api/system-hostname/#update","text":"","title":"update"},{"location":"api/system-hostname/#input_1","text":"Takes the same input from validate.","title":"Input"},{"location":"api/system-hosts/","text":"system-hosts Manage DNS records for DNSMasq. read Input Return all current configured records from the hosts file inside the status field. Return all remote records from hosts database inside the `configuration field. { status : { 127.0.0.1 : [ localhost , localhost.localdomain ], 192.168.1.2 : [ t1.net.loc ], 192.168.5.246 : [ test.local.neth.eu , test ] }, configuration : [ { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote } ] } validate Constraints The key ( name field ) must be a valid FQDN and must not already exists in case of creation WildcardMode can be enabled or disabled IpAddress must be a valid IPv4 address Input A remote host esmith db record in JSON format. The record must also contain an action fields which can be: - create for new dns record creation - update when updating and existing record Example: { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote , action : create } update Use the same input from validate. create Use the same input from validate. delete Pass the the key to be deleted inside the name field. Example: { name : my.host.com }","title":"system-hosts"},{"location":"api/system-hosts/#system-hosts","text":"Manage DNS records for DNSMasq.","title":"system-hosts"},{"location":"api/system-hosts/#read","text":"","title":"read"},{"location":"api/system-hosts/#input","text":"Return all current configured records from the hosts file inside the status field. Return all remote records from hosts database inside the `configuration field. { status : { 127.0.0.1 : [ localhost , localhost.localdomain ], 192.168.1.2 : [ t1.net.loc ], 192.168.5.246 : [ test.local.neth.eu , test ] }, configuration : [ { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote } ] }","title":"Input"},{"location":"api/system-hosts/#validate","text":"","title":"validate"},{"location":"api/system-hosts/#constraints","text":"The key ( name field ) must be a valid FQDN and must not already exists in case of creation WildcardMode can be enabled or disabled IpAddress must be a valid IPv4 address","title":"Constraints"},{"location":"api/system-hosts/#input_1","text":"A remote host esmith db record in JSON format. The record must also contain an action fields which can be: - create for new dns record creation - update when updating and existing record Example: { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote , action : create }","title":"Input"},{"location":"api/system-hosts/#update","text":"Use the same input from validate.","title":"update"},{"location":"api/system-hosts/#create","text":"Use the same input from validate.","title":"create"},{"location":"api/system-hosts/#delete","text":"Pass the the key to be deleted inside the name field. Example: { name : my.host.com }","title":"delete"},{"location":"api/system-openssh/","text":"system-openssh Read and write configuration for nethserver-openssh package. read Output A JSON object containing configuration and status fields: { configuration : { sshd prop }, status : { connections : list of active connections } } Output example: { configuration : { name : sshd , props : { LoginGraceTime : 2m , MaxAuthTries : 6 , PasswordAuthentication : yes , PermitRootLogin : yes , Protocol : 2 , TCPPort : 22 , UsePAM : yes , access : green,red , status : enabled }, type : service }, status : { connections : [ { local : 192.168.1.1:22 , peer : 192.168.1.45:54478 } ] } } validate Constraints PasswordAuthentication: boolean PermitRootLogin: boolean TCPPort: port number status: enabled or disabled Input An Esmith db record in JSON format: { name : key , props : { prop : value ... prop : value }, type : record-type } Input example from: config getjson sshd : { name : sshd , props : { LoginGraceTime : 2m , MaxAuthTries : 6 , PasswordAuthentication : yes , PermitRootLogin : yes , Protocol : 2 , TCPPort : 22 , UsePAM : yes , access : green,red , status : enabled }, type : service } Invocation example: echo { props :{ status : enable , access : green,red , MaxAuthTries : 6 , UsePAM : yes , PasswordAuthentication : yes , LoginGraceTime : 2m , Protocol : 2 , PermitRootLogin : yes , TCPPort : 22 }, name : sshd , type : service } | ./validate write Same input from validate helper.","title":"system-openssh"},{"location":"api/system-openssh/#system-openssh","text":"Read and write configuration for nethserver-openssh package.","title":"system-openssh"},{"location":"api/system-openssh/#read","text":"","title":"read"},{"location":"api/system-openssh/#output","text":"A JSON object containing configuration and status fields: { configuration : { sshd prop }, status : { connections : list of active connections } } Output example: { configuration : { name : sshd , props : { LoginGraceTime : 2m , MaxAuthTries : 6 , PasswordAuthentication : yes , PermitRootLogin : yes , Protocol : 2 , TCPPort : 22 , UsePAM : yes , access : green,red , status : enabled }, type : service }, status : { connections : [ { local : 192.168.1.1:22 , peer : 192.168.1.45:54478 } ] } }","title":"Output"},{"location":"api/system-openssh/#validate","text":"","title":"validate"},{"location":"api/system-openssh/#constraints","text":"PasswordAuthentication: boolean PermitRootLogin: boolean TCPPort: port number status: enabled or disabled","title":"Constraints"},{"location":"api/system-openssh/#input","text":"An Esmith db record in JSON format: { name : key , props : { prop : value ... prop : value }, type : record-type } Input example from: config getjson sshd : { name : sshd , props : { LoginGraceTime : 2m , MaxAuthTries : 6 , PasswordAuthentication : yes , PermitRootLogin : yes , Protocol : 2 , TCPPort : 22 , UsePAM : yes , access : green,red , status : enabled }, type : service } Invocation example: echo { props :{ status : enable , access : green,red , MaxAuthTries : 6 , UsePAM : yes , PasswordAuthentication : yes , LoginGraceTime : 2m , Protocol : 2 , PermitRootLogin : yes , TCPPort : 22 }, name : sshd , type : service } | ./validate","title":"Input"},{"location":"api/system-openssh/#write","text":"Same input from validate helper.","title":"write"},{"location":"api/system-shutdown/","text":"system-shutdown Reboot or poweroff the server. update Input A JSON containg an action field. Valid actions are: poweroff and reboot . Example: { action : reboot }","title":"system-shutdown"},{"location":"api/system-shutdown/#system-shutdown","text":"Reboot or poweroff the server.","title":"system-shutdown"},{"location":"api/system-shutdown/#update","text":"","title":"update"},{"location":"api/system-shutdown/#input","text":"A JSON containg an action field. Valid actions are: poweroff and reboot . Example: { action : reboot }","title":"Input"},{"location":"api/system-status/","text":"system-status Return variuous information on the server. The system status is composed by: CPU number and type kernel version memory statistics (in kB) uptime os release load hardware vendor and product name read Output Example: { configuration : , status : { cpu : { model : Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz , n : 1 }, hardware : innotek GmbH VirtualBox , kernel : 3.10.0-693.21.1.el7.x86_64 , load : [ 0.18 , 0.06 , 0.06 ], memory : { Active : 364 , Active(anon) : 55 , Active(file) : 310 , AnonHugePages : 14 , AnonPages : 109 , Bounce : 0 , Buffers : 3 , Cached : 471 , CommitLimit : 1521 , Committed_AS : 574 , DirectMap2M : 938 , DirectMap4k : 86 , Dirty : 1 , HardwareCorrupted : 0 , HugePages_Free : 0 , HugePages_Rsvd : 0 , HugePages_Surp : 0 , HugePages_Total : 0 , Hugepagesize : 2 , Inactive : 218 , Inactive(anon) : 72 , Inactive(file) : 146 , KernelStack : 3 , Mapped : 39 , MemAvailable : 591 , MemFree : 170 , MemTotal : 993 , Mlocked : 0 , NFS_Unstable : 0 , PageTables : 18 , SReclaimable : 145 , SUnreclaim : 31 , Shmem : 18 , Slab : 176 , SwapCached : 1 , SwapFree : 1013 , SwapTotal : 1024 , Unevictable : 0 , VmallocChunk : 33554424 , VmallocTotal : 33554432 , VmallocUsed : 6 , Writeback : 0 , WritebackTmp : 0 }, release : NethServer release 7.5.1804 (final) , uptime : { days : 0 , hours : 1 , minutes : 34 , seconds : 42 } } }","title":"system-status"},{"location":"api/system-status/#system-status","text":"Return variuous information on the server. The system status is composed by: CPU number and type kernel version memory statistics (in kB) uptime os release load hardware vendor and product name","title":"system-status"},{"location":"api/system-status/#read","text":"","title":"read"},{"location":"api/system-status/#output","text":"Example: { configuration : , status : { cpu : { model : Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz , n : 1 }, hardware : innotek GmbH VirtualBox , kernel : 3.10.0-693.21.1.el7.x86_64 , load : [ 0.18 , 0.06 , 0.06 ], memory : { Active : 364 , Active(anon) : 55 , Active(file) : 310 , AnonHugePages : 14 , AnonPages : 109 , Bounce : 0 , Buffers : 3 , Cached : 471 , CommitLimit : 1521 , Committed_AS : 574 , DirectMap2M : 938 , DirectMap4k : 86 , Dirty : 1 , HardwareCorrupted : 0 , HugePages_Free : 0 , HugePages_Rsvd : 0 , HugePages_Surp : 0 , HugePages_Total : 0 , Hugepagesize : 2 , Inactive : 218 , Inactive(anon) : 72 , Inactive(file) : 146 , KernelStack : 3 , Mapped : 39 , MemAvailable : 591 , MemFree : 170 , MemTotal : 993 , Mlocked : 0 , NFS_Unstable : 0 , PageTables : 18 , SReclaimable : 145 , SUnreclaim : 31 , Shmem : 18 , Slab : 176 , SwapCached : 1 , SwapFree : 1013 , SwapTotal : 1024 , Unevictable : 0 , VmallocChunk : 33554424 , VmallocTotal : 33554432 , VmallocUsed : 6 , Writeback : 0 , WritebackTmp : 0 }, release : NethServer release 7.5.1804 (final) , uptime : { days : 0 , hours : 1 , minutes : 34 , seconds : 42 } } }","title":"Output"},{"location":"api/system-task/","text":"system-task Check if there is a running event. read Output If no running tasks is found, just output: { steps : -1 , event : null , message : no running tasks } Otherwise output the following once per second, until the event has been terminated: { steps : -1 , pid : 15018 , args : arg1 arg2 , event : nethserver-event-name } If steps has value equal to -1 , the system can't determinate the progess of the running event.","title":"system-task"},{"location":"api/system-task/#system-task","text":"Check if there is a running event.","title":"system-task"},{"location":"api/system-task/#read","text":"","title":"read"},{"location":"api/system-task/#output","text":"If no running tasks is found, just output: { steps : -1 , event : null , message : no running tasks } Otherwise output the following once per second, until the event has been terminated: { steps : -1 , pid : 15018 , args : arg1 arg2 , event : nethserver-event-name } If steps has value equal to -1 , the system can't determinate the progess of the running event.","title":"Output"},{"location":"api/system-time/","text":"system-time Configure server date and time. read Return the current date and time along with chronyd configuration. If chronyd status is disabled, the time configuration is manual. Example: { status : { datetime : Wed Sep 5 15:28:59 GMT 2018 , date : 2018-09-10 , time : 10:07 }, configuration : { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , timezones : [ Africa/Abidjan , Africa/Accra , ... UTC ] } } validate Constraints chronyd and timezone field from read input if chronyd status is disabled, the keys named date and time must contain the a valid time ( HH:MM ) and date ( YYYY-MM-DD ). Input Example: { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } Invocation example: echo { chronyd :{ props :{ UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } | ./validate update Set current timezone and chronyd configuration. If chronyd is disabled, date and time is set to manual input values. Tries also to set PHP timezone (fails silently). Same input as validate helper.","title":"system-time"},{"location":"api/system-time/#system-time","text":"Configure server date and time.","title":"system-time"},{"location":"api/system-time/#read","text":"Return the current date and time along with chronyd configuration. If chronyd status is disabled, the time configuration is manual. Example: { status : { datetime : Wed Sep 5 15:28:59 GMT 2018 , date : 2018-09-10 , time : 10:07 }, configuration : { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , timezones : [ Africa/Abidjan , Africa/Accra , ... UTC ] } }","title":"read"},{"location":"api/system-time/#validate","text":"","title":"validate"},{"location":"api/system-time/#constraints","text":"chronyd and timezone field from read input if chronyd status is disabled, the keys named date and time must contain the a valid time ( HH:MM ) and date ( YYYY-MM-DD ).","title":"Constraints"},{"location":"api/system-time/#input","text":"Example: { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } Invocation example: echo { chronyd :{ props :{ UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } | ./validate","title":"Input"},{"location":"api/system-time/#update","text":"Set current timezone and chronyd configuration. If chronyd is disabled, date and time is set to manual input values. Tries also to set PHP timezone (fails silently). Same input as validate helper.","title":"update"}]}