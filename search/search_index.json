{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NethServer Cockpit developer guide This guide describes how Cockpit is used inside NethServer and how to develop a new NethServer Cockpit module. Guidelines Developer environment API guidelines UI guidelines References Application manifest Build Building RPM Building documentation Create new module If you haven't used Cockpit before, be sure to check out the Cockpit Guide , as it explains Cockpit foundamentals. Once you're familiar with that process, you may proceed with this guide. To start the development of new NethServer Cockpit module: Read project Guidelines Prepare the Environment Scaffold your application","title":"Home"},{"location":"#nethserver-cockpit-developer-guide","text":"This guide describes how Cockpit is used inside NethServer and how to develop a new NethServer Cockpit module.","title":"NethServer Cockpit developer guide"},{"location":"#guidelines","text":"Developer environment API guidelines UI guidelines","title":"Guidelines"},{"location":"#references","text":"Application manifest","title":"References"},{"location":"#build","text":"Building RPM Building documentation","title":"Build"},{"location":"#create-new-module","text":"If you haven't used Cockpit before, be sure to check out the Cockpit Guide , as it explains Cockpit foundamentals. Once you're familiar with that process, you may proceed with this guide. To start the development of new NethServer Cockpit module: Read project Guidelines Prepare the Environment Scaffold your application","title":"Create new module"},{"location":"api_guidelines/","text":"Design guidelines Each cockpit module has its own helpers implementing a set API to read and write the configuration and to execute actions. All helpers are saved inside /usr/libexec/nethserver/api/ controller_name / directory. Each helper: must be an executable file, it can be written in any language depending on the task Example: /usr/libexec/nethserver/system-openssh/read . uses JSON format for input and output; the JSON can must be read as input from STDIN and printed to STDOUT can use other helpers to execute multiple actions, the helpers can be placed in the same directory (eg. /usr/libexec/nethserver/openssh/help1-read ) The JavaScript controller uses the cockpit.spawn method to communicate with the backend. After spawning the process, the controller gather the standard output to track the task progress. At the end, the process exit code will raise an error or a success. Example: process = cockpit . spawn ( /usr/libexec/nethserver/system-status/read , { ... } Methods APIs should implement classical CRUD operations: create read update delete Extra operations: validate execute hints None of the above action is mandatory. create Create a new record and apply the configuration. It's used to handle new records inside databases to mimic a table behavior. The input should be a JSON esmith record . Example: system-hosts . read Read the current system status and configuration. It should return an object with system and configuration field. JSON format: { status : { ... } configuration : { ... } } Example: system-openssh . update Update and existing record or a key inside the configuration database and apply the configuration. Example: system-openssh . delete Delete and existing record and apply the configuration. Example: system-hosts . validate Validate the given input. If validation fail, raise a validation error and exit 1. Otherwise return a success and exit 0. execute Execute a command in foreground or background. This type of operation can return raw output from underlying system. Example: system-backup hints Execute system checks and propose configuration tweaks. Check out the JSON format . Documentation When creating new helpers, remember to write the related documentation. Download the template and edit it Add the new document inside the docs/docs/api directory Add the new document inside the navigation menu Try to respect the following rules: always use a correct header level add examples to you documentation enable syntax highlighting for code See also building documementation .","title":"Design guidelines"},{"location":"api_guidelines/#design-guidelines","text":"Each cockpit module has its own helpers implementing a set API to read and write the configuration and to execute actions. All helpers are saved inside /usr/libexec/nethserver/api/ controller_name / directory. Each helper: must be an executable file, it can be written in any language depending on the task Example: /usr/libexec/nethserver/system-openssh/read . uses JSON format for input and output; the JSON can must be read as input from STDIN and printed to STDOUT can use other helpers to execute multiple actions, the helpers can be placed in the same directory (eg. /usr/libexec/nethserver/openssh/help1-read ) The JavaScript controller uses the cockpit.spawn method to communicate with the backend. After spawning the process, the controller gather the standard output to track the task progress. At the end, the process exit code will raise an error or a success. Example: process = cockpit . spawn ( /usr/libexec/nethserver/system-status/read , { ... }","title":"Design guidelines"},{"location":"api_guidelines/#methods","text":"APIs should implement classical CRUD operations: create read update delete Extra operations: validate execute hints None of the above action is mandatory.","title":"Methods"},{"location":"api_guidelines/#create","text":"Create a new record and apply the configuration. It's used to handle new records inside databases to mimic a table behavior. The input should be a JSON esmith record . Example: system-hosts .","title":"create"},{"location":"api_guidelines/#read","text":"Read the current system status and configuration. It should return an object with system and configuration field. JSON format: { status : { ... } configuration : { ... } } Example: system-openssh .","title":"read"},{"location":"api_guidelines/#update","text":"Update and existing record or a key inside the configuration database and apply the configuration. Example: system-openssh .","title":"update"},{"location":"api_guidelines/#delete","text":"Delete and existing record and apply the configuration. Example: system-hosts .","title":"delete"},{"location":"api_guidelines/#validate","text":"Validate the given input. If validation fail, raise a validation error and exit 1. Otherwise return a success and exit 0.","title":"validate"},{"location":"api_guidelines/#execute","text":"Execute a command in foreground or background. This type of operation can return raw output from underlying system. Example: system-backup","title":"execute"},{"location":"api_guidelines/#hints","text":"Execute system checks and propose configuration tweaks. Check out the JSON format .","title":"hints"},{"location":"api_guidelines/#documentation","text":"When creating new helpers, remember to write the related documentation. Download the template and edit it Add the new document inside the docs/docs/api directory Add the new document inside the navigation menu Try to respect the following rules: always use a correct header level add examples to you documentation enable syntax highlighting for code See also building documementation .","title":"Documentation"},{"location":"api_libraries/","text":"Helper libraries The nethserver-cockpit RPM includes some simple libraries to ease the development of helpers. Usage of such libraries is not mandatory. PHP This library includes some classes from NethGUI framework to speed up the porting of existing code. PHP helper library is useful to quickly adapt validation code from old Server Manager. Include the library: ?php require_once ( /usr/libexec/nethserver/api/lib/Helpers.php ); Available functions readInput Read the JSON input and return a named array. Example: ?php $data = readInput (); print $data [ name ]; EsmithDatabase Access the Esmith database. Example: ?php $db = new EsmithDatabase ( configuration ); $policy = $db - getProp ( tls , policy ); $tls = $db - getKey ( tls ); $records = $db - getAll (); LegacyValidator Interface to old validator code. See below. Legacy validator When using the LegacyValidator class, you should follow some rules which ease the cut paste from legacy code. General workflow: Include the helper Read the input Create the validator (calling it $v ) Copy all declareParameter invocations from the old Module Parameters with ANYTHING validator could be omitted Replace all call to $this with $v Make sure the first parameter of declareParameter is the name of the prop inside the db (Optional) Remove the 3rd argument from declareParameter calls If present, copy validate function. It should be enough to copy the code inside if ($this- getRequest()- isMutation()) { condition. Replace all $this with $v Validate the input calling $v- validate() Invoke success() method if validate() returns true Otherwise invoke error($v) passing the validator object Full example: ?php # Include library require_once ( /usr/libexec/nethserver/api/lib/Helpers.php ); # Read input $data = readInput (); # Create the validator $v = new LegacyValidator ( $data [ props ]); # Declare all parameters $v - declareParameter ( PasswordAuthentication , Validate :: BOOLEAN ); # Validate the input if ( $v - validate ()) { success (); } else { error ( $v ); } Perl To write better code, always enable warnings and strict checks: use warnings ; use strict ; Include the library: require /usr/libexec/nethserver/api/lib/helper_functions.pl ; Available functions success Print a success JSON object and exit 0. error Print a JSON error and exit 1. Takes 2 arguments: - the error type (default: GenericError) - a message (default \"Generic error\") Example: error ( GenericError , System message failure ); readInput Read JSON input from STDIN Exit with InvalidInput error if JSON can't be decoded. Example: my $data = readInput (); print $data - { name }; hints Output an hint in JSON format. Takes 3 parameters: a general hint message an hashmap reference, the map must be in the form {\"prop1\" = \"hint1\", ... } an url to external doc Example of simple hint: hints ( , change_me ); Example of complex hint: hints ( ,{ TCPPort = change_default , status = status_should_be_enabled }, http://docs.nethserver.org ); General examples Output sshd key in json output: use JSON ; use esmith::db ; my $db = esmith::db - open ( configuration ); print to_json ( $db - prepare_json ( sshd ), { utf8 = 1 , pretty = 0 , allow_nonref = 1 }); Alternative implementation: use JSON ; use esmith::ConfigDB ; my $db = esmith::ConfigDB - open_ro (); my $record = $db - get ( sshd ); my %props = $record - props ; print encode_json ({ name = $record - key , type = $record - prop ( type ), props = \\ %props }); BASH BASH is useful when writing simple helpers. First, include the library: . /usr/libexec/nethserver/api/lib/helper_functions Available functions success Print a success JSON object and exit 0. error Print a JSON error and exit 1. Takes 2 arguments: the error type (default: GenericError) a message (default \"Generic error\") Example: error GenericError System failure message invalid_error Print an InvalidInput error and exit 1. hints Print am hint in JSON format. Takes 4 parameters: a general message a details map in json format the number of element inside the details map a link to an external doc Example of simple hint: hint one_or_more_dns_not_working Example of complex hint: hints { TCPPort : change_default_ssh_port } 1 General examples Read JSON from STDIN and set the record: cat /dev/stdin | /sbin/e-smith/config setjson - 2 /dev/null Output sshd key in json output: /sbin/e-smith/config getjson sshd","title":"Helper libraries"},{"location":"api_libraries/#helper-libraries","text":"The nethserver-cockpit RPM includes some simple libraries to ease the development of helpers. Usage of such libraries is not mandatory.","title":"Helper libraries"},{"location":"api_libraries/#php","text":"This library includes some classes from NethGUI framework to speed up the porting of existing code. PHP helper library is useful to quickly adapt validation code from old Server Manager. Include the library: ?php require_once ( /usr/libexec/nethserver/api/lib/Helpers.php );","title":"PHP"},{"location":"api_libraries/#available-functions","text":"readInput Read the JSON input and return a named array. Example: ?php $data = readInput (); print $data [ name ]; EsmithDatabase Access the Esmith database. Example: ?php $db = new EsmithDatabase ( configuration ); $policy = $db - getProp ( tls , policy ); $tls = $db - getKey ( tls ); $records = $db - getAll (); LegacyValidator Interface to old validator code. See below.","title":"Available functions"},{"location":"api_libraries/#legacy-validator","text":"When using the LegacyValidator class, you should follow some rules which ease the cut paste from legacy code. General workflow: Include the helper Read the input Create the validator (calling it $v ) Copy all declareParameter invocations from the old Module Parameters with ANYTHING validator could be omitted Replace all call to $this with $v Make sure the first parameter of declareParameter is the name of the prop inside the db (Optional) Remove the 3rd argument from declareParameter calls If present, copy validate function. It should be enough to copy the code inside if ($this- getRequest()- isMutation()) { condition. Replace all $this with $v Validate the input calling $v- validate() Invoke success() method if validate() returns true Otherwise invoke error($v) passing the validator object Full example: ?php # Include library require_once ( /usr/libexec/nethserver/api/lib/Helpers.php ); # Read input $data = readInput (); # Create the validator $v = new LegacyValidator ( $data [ props ]); # Declare all parameters $v - declareParameter ( PasswordAuthentication , Validate :: BOOLEAN ); # Validate the input if ( $v - validate ()) { success (); } else { error ( $v ); }","title":"Legacy validator"},{"location":"api_libraries/#perl","text":"To write better code, always enable warnings and strict checks: use warnings ; use strict ; Include the library: require /usr/libexec/nethserver/api/lib/helper_functions.pl ;","title":"Perl"},{"location":"api_libraries/#available-functions_1","text":"success Print a success JSON object and exit 0. error Print a JSON error and exit 1. Takes 2 arguments: - the error type (default: GenericError) - a message (default \"Generic error\") Example: error ( GenericError , System message failure ); readInput Read JSON input from STDIN Exit with InvalidInput error if JSON can't be decoded. Example: my $data = readInput (); print $data - { name }; hints Output an hint in JSON format. Takes 3 parameters: a general hint message an hashmap reference, the map must be in the form {\"prop1\" = \"hint1\", ... } an url to external doc Example of simple hint: hints ( , change_me ); Example of complex hint: hints ( ,{ TCPPort = change_default , status = status_should_be_enabled }, http://docs.nethserver.org );","title":"Available functions"},{"location":"api_libraries/#general-examples","text":"Output sshd key in json output: use JSON ; use esmith::db ; my $db = esmith::db - open ( configuration ); print to_json ( $db - prepare_json ( sshd ), { utf8 = 1 , pretty = 0 , allow_nonref = 1 }); Alternative implementation: use JSON ; use esmith::ConfigDB ; my $db = esmith::ConfigDB - open_ro (); my $record = $db - get ( sshd ); my %props = $record - props ; print encode_json ({ name = $record - key , type = $record - prop ( type ), props = \\ %props });","title":"General examples"},{"location":"api_libraries/#bash","text":"BASH is useful when writing simple helpers. First, include the library: . /usr/libexec/nethserver/api/lib/helper_functions","title":"BASH"},{"location":"api_libraries/#available-functions_2","text":"success Print a success JSON object and exit 0. error Print a JSON error and exit 1. Takes 2 arguments: the error type (default: GenericError) a message (default \"Generic error\") Example: error GenericError System failure message invalid_error Print an InvalidInput error and exit 1. hints Print am hint in JSON format. Takes 4 parameters: a general message a details map in json format the number of element inside the details map a link to an external doc Example of simple hint: hint one_or_more_dns_not_working Example of complex hint: hints { TCPPort : change_default_ssh_port } 1","title":"Available functions"},{"location":"api_libraries/#general-examples_1","text":"Read JSON from STDIN and set the record: cat /dev/stdin | /sbin/e-smith/config setjson - 2 /dev/null Output sshd key in json output: /sbin/e-smith/config getjson sshd","title":"General examples"},{"location":"api_protocol/","text":"Communication protocol The API and the UI talk to each other using JSON and the communication protocol defines a set of a well-known objects. As an exception, the execute operation can return RAW output instead of JSON. Esmith db records Objects passed to and returned by APIs must reflect esmith db format and respect the upper/lower case notation of property names: { name : keyname , type : typename , props : { FirstProp : FirstPropValue , ... } } Please note that name and type field are reserved. Example Host goofy inside the hosts database. Original esmith db notation: goofy=local Description=Goofy workstation IpAddress=192.168.1.22 Equivalent JSON notation: { name : goofy , type : local , props : { Description : Goofy workstation , IpAddress : 192.168.1.22 } } Events If invoked with -j option, the signal-event command outputs the event progress in JSON format. Example: { steps : 2 , pid : 17354 , args : , event : nethserver-lsm-save } { step : 1 , pid : 17354 , action : S05generic_template_expand , event : nethserver-lsm-save , state : running } { progress : 0.50 , time : 0.21036 , exit : 0 , event : nethserver-lsm-save , state : done , step : 1 , pid : 17354 , action : S05generic_template_expand } { step : 2 , pid : 17354 , action : S90adjust-services , event : nethserver-lsm-save , state : running } { progress : 1.00 , time : 0.685865 , exit : 0 , event : nethserver-lsm-save , state : done , step : 2 , pid : 17354 , action : S90adjust-services } { pid : 17354 , status : success , event : nethserver-lsm-save } Special fields: steps: set the total number of event actions step: identify the current running step progress: percentage of event completion status: can be success or failed in case of failure Success Simple success message: { state : success } Errors If something goes wrong, APIs must output a JSON object which describes the error reason. For instance: { id : 1507721123244 , type : Error , message : Generic error reason , attributes : { output : output from the system } } The message property should be used if an error is not caused by a specific attribute. On the other hand, there could be cases where the attributes object is empty, or undefined because the error condition does not depend on any of the attributes or attributes are not defined at all. Note that the same Error object could represent multiple failure reasons. The id field should be a unique identifier like a timestamp. Bash example: $ date +%s Well-known errors The list of well-known errors includes: validation event failure invalid input Validation Validation error: { id : 1536738091 , type : NotValid , message : Validation failed , attributes : [ { parameter : name , value : test4 , error : valid_hostname_fqdn } ] } Event failure Event has failed: { id : 1536738278 , type : EventFailed , message : See /var/log/messages } Invalid input Invalid JSON object input: { id : 1536738276 , type : InvalidInput , message : No JSON data available } Hints Configuration suggestions displayed inside the UI. An hint must always contain the following fields: count : the count of hints for the module, 0 means no hints message : if the hint is not bounded to a specific field, a general message for the module link : a link to external documentation details : contains hints specific to one ore more property. Object format: prop_name : message Unused field should be set to null Example of simple hint: { count : 1 , details : null , message : must_configure_backup_data , link : http://docs.nethserver.org/en/v7/backup.html } Example of multiple hint: { count : 2 , details : { snmpd : service_not_consistent , smartd : service_not_consistent }, message : null , link : null }","title":"Communication protocol"},{"location":"api_protocol/#communication-protocol","text":"The API and the UI talk to each other using JSON and the communication protocol defines a set of a well-known objects. As an exception, the execute operation can return RAW output instead of JSON.","title":"Communication protocol"},{"location":"api_protocol/#esmith-db-records","text":"Objects passed to and returned by APIs must reflect esmith db format and respect the upper/lower case notation of property names: { name : keyname , type : typename , props : { FirstProp : FirstPropValue , ... } } Please note that name and type field are reserved.","title":"Esmith db records"},{"location":"api_protocol/#example","text":"Host goofy inside the hosts database. Original esmith db notation: goofy=local Description=Goofy workstation IpAddress=192.168.1.22 Equivalent JSON notation: { name : goofy , type : local , props : { Description : Goofy workstation , IpAddress : 192.168.1.22 } }","title":"Example"},{"location":"api_protocol/#events","text":"If invoked with -j option, the signal-event command outputs the event progress in JSON format. Example: { steps : 2 , pid : 17354 , args : , event : nethserver-lsm-save } { step : 1 , pid : 17354 , action : S05generic_template_expand , event : nethserver-lsm-save , state : running } { progress : 0.50 , time : 0.21036 , exit : 0 , event : nethserver-lsm-save , state : done , step : 1 , pid : 17354 , action : S05generic_template_expand } { step : 2 , pid : 17354 , action : S90adjust-services , event : nethserver-lsm-save , state : running } { progress : 1.00 , time : 0.685865 , exit : 0 , event : nethserver-lsm-save , state : done , step : 2 , pid : 17354 , action : S90adjust-services } { pid : 17354 , status : success , event : nethserver-lsm-save } Special fields: steps: set the total number of event actions step: identify the current running step progress: percentage of event completion status: can be success or failed in case of failure","title":"Events"},{"location":"api_protocol/#success","text":"Simple success message: { state : success }","title":"Success"},{"location":"api_protocol/#errors","text":"If something goes wrong, APIs must output a JSON object which describes the error reason. For instance: { id : 1507721123244 , type : Error , message : Generic error reason , attributes : { output : output from the system } } The message property should be used if an error is not caused by a specific attribute. On the other hand, there could be cases where the attributes object is empty, or undefined because the error condition does not depend on any of the attributes or attributes are not defined at all. Note that the same Error object could represent multiple failure reasons. The id field should be a unique identifier like a timestamp. Bash example: $ date +%s","title":"Errors"},{"location":"api_protocol/#well-known-errors","text":"The list of well-known errors includes: validation event failure invalid input","title":"Well-known errors"},{"location":"api_protocol/#validation","text":"Validation error: { id : 1536738091 , type : NotValid , message : Validation failed , attributes : [ { parameter : name , value : test4 , error : valid_hostname_fqdn } ] }","title":"Validation"},{"location":"api_protocol/#event-failure","text":"Event has failed: { id : 1536738278 , type : EventFailed , message : See /var/log/messages }","title":"Event failure"},{"location":"api_protocol/#invalid-input","text":"Invalid JSON object input: { id : 1536738276 , type : InvalidInput , message : No JSON data available }","title":"Invalid input"},{"location":"api_protocol/#hints","text":"Configuration suggestions displayed inside the UI. An hint must always contain the following fields: count : the count of hints for the module, 0 means no hints message : if the hint is not bounded to a specific field, a general message for the module link : a link to external documentation details : contains hints specific to one ore more property. Object format: prop_name : message Unused field should be set to null Example of simple hint: { count : 1 , details : null , message : must_configure_backup_data , link : http://docs.nethserver.org/en/v7/backup.html } Example of multiple hint: { count : 2 , details : { snmpd : service_not_consistent , smartd : service_not_consistent }, message : null , link : null }","title":"Hints"},{"location":"api_template/","text":"module-name Short module description read Output Describe JSON output here: { ... } validate Constraints Constraint 1 Constraint 2 ... Input Describe input here. Input example: { .... } Invocation example: echo ... | command update Update input description. Use subtitles to describe multiple update actions. delete Delete input description. create Create input description.","title":"module-name"},{"location":"api_template/#module-name","text":"Short module description","title":"module-name"},{"location":"api_template/#read","text":"","title":"read"},{"location":"api_template/#output","text":"Describe JSON output here: { ... }","title":"Output"},{"location":"api_template/#validate","text":"","title":"validate"},{"location":"api_template/#constraints","text":"Constraint 1 Constraint 2 ...","title":"Constraints"},{"location":"api_template/#input","text":"Describe input here. Input example: { .... } Invocation example: echo ... | command","title":"Input"},{"location":"api_template/#update","text":"Update input description. Use subtitles to describe multiple update actions.","title":"update"},{"location":"api_template/#delete","text":"Delete input description.","title":"delete"},{"location":"api_template/#create","text":"Create input description.","title":"create"},{"location":"application_manifest/","text":"Application manifest Applications are described by a JSON manifest inspired to AppData and NPM package.json formats. The manifest is used both for generating the \"Applications\" page and for a future App store. Manifest must be placed under /usr/share/cockpit/nethserver/applications directory and named with the application id like id .json ; Format id : this tag contains the unique identifier for this application (required) name : descriptive name of the application (required) summary : describe what is the purpose of the application in few words (required) description : include 2-3 paragraphs describing any important features. Each line should be an element of the array. Supports markdown format. (recommended) icon : name of the icon file; the icon should be 256x256px (recommended) screenshots : a list of screenshots; all screenshots should have a 16:9 aspect ratio, and should have a width that is no smaller than 620px (optional) url : link to local application installation. (required for web applications) homepage : this is a recommended tag for link project official site (optional) release : define the version and release date of this application (recommended) provides : list of provided RPM packages (optional) tags : list of keywords to help people discover content of the application (optional) license : license of the application, please pick one from SPDX list (recommended) bugs : the url of project's issue tracker and / or the email address to which issues should be reported (optional) author : the name of of the author with optional email and urls fields. (recommended) Images like screenshots and icons must be placed under /usr/share/cockpit/ application-id /assets directory. Example File /usr/share/cockpit/nethserver/applications/nextcloud.json : { id : nethserver-netxtcloud , name : NextCloud , summary : Share your data , description : [ Access, **share** and protect your files, calendars, contacts, communication more at home and in your enterprise. , Nextcloud puts your data at your fingertips, under your control. ], icon : icon.png , screenshots : [ { caption : Login , image : login.png }, { caption : Share data , image : data.png } ], url : /nextcloud , homepage : http://www.nextcloud.org , provides : [ nextcloud , nethserver-nextcloud ], release : { version : 12.0.2 }, tags : [ cloud , files , share ], license : GPL-3.0 , bugs : { url : https://github.com/owner/project/issues , email : project@hostname.com }, author : { name : Nextcloud , url : https://nextcloud.com , email : info@nextcloud.com } }","title":"Application manifest"},{"location":"application_manifest/#application-manifest","text":"Applications are described by a JSON manifest inspired to AppData and NPM package.json formats. The manifest is used both for generating the \"Applications\" page and for a future App store. Manifest must be placed under /usr/share/cockpit/nethserver/applications directory and named with the application id like id .json ;","title":"Application manifest"},{"location":"application_manifest/#format","text":"id : this tag contains the unique identifier for this application (required) name : descriptive name of the application (required) summary : describe what is the purpose of the application in few words (required) description : include 2-3 paragraphs describing any important features. Each line should be an element of the array. Supports markdown format. (recommended) icon : name of the icon file; the icon should be 256x256px (recommended) screenshots : a list of screenshots; all screenshots should have a 16:9 aspect ratio, and should have a width that is no smaller than 620px (optional) url : link to local application installation. (required for web applications) homepage : this is a recommended tag for link project official site (optional) release : define the version and release date of this application (recommended) provides : list of provided RPM packages (optional) tags : list of keywords to help people discover content of the application (optional) license : license of the application, please pick one from SPDX list (recommended) bugs : the url of project's issue tracker and / or the email address to which issues should be reported (optional) author : the name of of the author with optional email and urls fields. (recommended) Images like screenshots and icons must be placed under /usr/share/cockpit/ application-id /assets directory.","title":"Format"},{"location":"application_manifest/#example","text":"File /usr/share/cockpit/nethserver/applications/nextcloud.json : { id : nethserver-netxtcloud , name : NextCloud , summary : Share your data , description : [ Access, **share** and protect your files, calendars, contacts, communication more at home and in your enterprise. , Nextcloud puts your data at your fingertips, under your control. ], icon : icon.png , screenshots : [ { caption : Login , image : login.png }, { caption : Share data , image : data.png } ], url : /nextcloud , homepage : http://www.nextcloud.org , provides : [ nextcloud , nethserver-nextcloud ], release : { version : 12.0.2 }, tags : [ cloud , files , share ], license : GPL-3.0 , bugs : { url : https://github.com/owner/project/issues , email : project@hostname.com }, author : { name : Nextcloud , url : https://nextcloud.com , email : info@nextcloud.com } }","title":"Example"},{"location":"authorizations/","text":"Authorizations Cockpit allows the login of any system users with a valid shell, that is the user shell must listed inside /etc/shells file. The web interface can be profiled using two different methods: the left most menu containing the main sections like \"System\" and \"Applications\" is part of the Cockpit project, and can be customized following the upstream documentation the inner menu inside \"System\" or \"Applications\" can be customized using nethserver-cockpit roles . UI sections The UI is split into 2 main sections: System : contains all modules shipped with nethserver-cockpit and available on any installation. Modules inside the system section can be used to configure the server basic behavior which is common to all modules. Some examples of system modules can be: the hostname, DNS configuration, account providers and so on. System modules are statically defined inside the /etc/nethserver/cockpit/authorization/system-routes.json and should not be modified Applications : contains all modules shipped with extra RPM packages. Each application is a complete set of features. Some exampled os applications can be: the firewall module, nextcloud or the mail server. A user can be granted access to specific applications or system modules. Roles A role is composed by 2 parts: web routes: a list of modules accessible by the logged user APIs: a list of underlay scripts executable by the logged user using sudo Web routes Each role must be defined inside /etc/nethserver/cockpit/authorization/roles.json . A role is defined by: a name, a unique identifier for the role; a groups with the same name must exists inside the system an array of system modules inside the system key an array of applications inside the applications Only listed modules will be accessible by the user, except \"Dashboard\" and \"About\" modules which are accessible by all users. Role example: { ... managers : { system : [ services , users-groups ], applications : [ ] } ... } APIs When accessing a web page, the interface calls some system APIs to display and edit data inside pages. To grant a role to a user, create a system group named like the role itself. Then grant to the group the ability to execute APIs calls using sudo configuration. Please note also that each page could call multiple APIs. Default roles The root user can always read and write everything, it can't be overridden. Pre-defined roles are: admins : same privileges as root, it can be customized managers : access only user ad groups, services and disk-usage, it can be customized To activate a role, create a group named like the role itself using the web interface or groupadd command, then add one or more user to it. Creating new roles Follow these steps to create a new role. Add a new object inside the roles.json file. Example: ... auditors : { system : [ ssh ], applications : [ nethserver-cgp ] } ... Create a new group. Using the account provider: echo { action : group-create , name : auditors1 } | /usr/libexec/nethserver/api/system-users/create Configure sudo. Example, `visudo -f /etc/sudoers.d/30_cockpit_auditors: Cmnd_Alias MANAGER = /usr/libexec/nethserver/api/system-ssh/* %auditors ALL=NOPASSWD: MANAGER # server-manager does not require a tty Defaults:%managers !requiretty","title":"Authorizations"},{"location":"authorizations/#authorizations","text":"Cockpit allows the login of any system users with a valid shell, that is the user shell must listed inside /etc/shells file. The web interface can be profiled using two different methods: the left most menu containing the main sections like \"System\" and \"Applications\" is part of the Cockpit project, and can be customized following the upstream documentation the inner menu inside \"System\" or \"Applications\" can be customized using nethserver-cockpit roles .","title":"Authorizations"},{"location":"authorizations/#ui-sections","text":"The UI is split into 2 main sections: System : contains all modules shipped with nethserver-cockpit and available on any installation. Modules inside the system section can be used to configure the server basic behavior which is common to all modules. Some examples of system modules can be: the hostname, DNS configuration, account providers and so on. System modules are statically defined inside the /etc/nethserver/cockpit/authorization/system-routes.json and should not be modified Applications : contains all modules shipped with extra RPM packages. Each application is a complete set of features. Some exampled os applications can be: the firewall module, nextcloud or the mail server. A user can be granted access to specific applications or system modules.","title":"UI sections"},{"location":"authorizations/#roles","text":"A role is composed by 2 parts: web routes: a list of modules accessible by the logged user APIs: a list of underlay scripts executable by the logged user using sudo","title":"Roles"},{"location":"authorizations/#web-routes","text":"Each role must be defined inside /etc/nethserver/cockpit/authorization/roles.json . A role is defined by: a name, a unique identifier for the role; a groups with the same name must exists inside the system an array of system modules inside the system key an array of applications inside the applications Only listed modules will be accessible by the user, except \"Dashboard\" and \"About\" modules which are accessible by all users. Role example: { ... managers : { system : [ services , users-groups ], applications : [ ] } ... }","title":"Web routes"},{"location":"authorizations/#apis","text":"When accessing a web page, the interface calls some system APIs to display and edit data inside pages. To grant a role to a user, create a system group named like the role itself. Then grant to the group the ability to execute APIs calls using sudo configuration. Please note also that each page could call multiple APIs.","title":"APIs"},{"location":"authorizations/#default-roles","text":"The root user can always read and write everything, it can't be overridden. Pre-defined roles are: admins : same privileges as root, it can be customized managers : access only user ad groups, services and disk-usage, it can be customized To activate a role, create a group named like the role itself using the web interface or groupadd command, then add one or more user to it.","title":"Default roles"},{"location":"authorizations/#creating-new-roles","text":"Follow these steps to create a new role. Add a new object inside the roles.json file. Example: ... auditors : { system : [ ssh ], applications : [ nethserver-cgp ] } ... Create a new group. Using the account provider: echo { action : group-create , name : auditors1 } | /usr/libexec/nethserver/api/system-users/create Configure sudo. Example, `visudo -f /etc/sudoers.d/30_cockpit_auditors: Cmnd_Alias MANAGER = /usr/libexec/nethserver/api/system-ssh/* %auditors ALL=NOPASSWD: MANAGER # server-manager does not require a tty Defaults:%managers !requiretty","title":"Creating new roles"},{"location":"build_doc/","text":"Building documentation This guide has been built using MkDocs and Material for MKDocs . Follow mkdocs installation instructions , or just use: pip install --user mkdocs mkdocs-material To serve the documentation during the development use: cd docs mkdocs serve Publish to GitHub pages To build and public the documentation directly to GitHub pages: cd docs mkdocs gh-deploy","title":"Building documentation"},{"location":"build_doc/#building-documentation","text":"This guide has been built using MkDocs and Material for MKDocs . Follow mkdocs installation instructions , or just use: pip install --user mkdocs mkdocs-material To serve the documentation during the development use: cd docs mkdocs serve","title":"Building documentation"},{"location":"build_doc/#publish-to-github-pages","text":"To build and public the documentation directly to GitHub pages: cd docs mkdocs gh-deploy","title":"Publish to GitHub pages"},{"location":"build_rpm/","text":"Building RPM Move to the root directory of cloned repository and use standard make-rpms NethServer tool: ./prep-sources make-rpms Install RPM Copy the rpm to the NethServer Access the NethServer, then download COPR repository: wget https://copr.fedorainfracloud.org/coprs/g/cockpit/cockpit-preview/repo/epel-7/group_cockpit-cockpit-preview-epel-7.repo -O /etc/yum.repos.d/cockpit.repo yum install nethserver-cockpit*rpm","title":"Building RPM"},{"location":"build_rpm/#building-rpm","text":"Move to the root directory of cloned repository and use standard make-rpms NethServer tool: ./prep-sources make-rpms","title":"Building RPM"},{"location":"build_rpm/#install-rpm","text":"Copy the rpm to the NethServer Access the NethServer, then download COPR repository: wget https://copr.fedorainfracloud.org/coprs/g/cockpit/cockpit-preview/repo/epel-7/group_cockpit-cockpit-preview-epel-7.repo -O /etc/yum.repos.d/cockpit.repo yum install nethserver-cockpit*rpm","title":"Install RPM"},{"location":"environment/","text":"Development environment Index Install requirements Code style Build API and UI Sync API and UI The development environment can be prepared on a Fedora or CentOS 7 machine. Follow these steps: prepare the environment do your modification to API or UI sync your modification to the server where cockpit is running Install requirements Prepare the development environment: Install developer tools: npm and git On Fedora: dnf install npm git On CentOS: yum install npm git Clone the repository: git clone git@github.com:NethServer/nethserver-cockpit Enter inside the cloned repository and install all ui dependencies: cd nethserver-cockpit/ui npm install npm run dev Build UI Enter UI directory and build using npm : cd ui/ ./prep-sources Sync API and UI Files can be copied using rsync. While UI could be synced without executing the build task each time, make sure API is always built before sync. Use the following commands: ssh root @192.168.1.20 mkdir -p ~/.local/share/cockpit/nethserver cd api / rsync - avz -- delete . /* root@192.168.1.20:/usr/libexec/nethserver/api/ cd ui/ rsync -avz --delete dist/* root@192.168.1.20:/usr/share/cockpit/nethserver/ Code style Please use configuration from EditorConfig: http://editorconfig.org","title":"Development environment"},{"location":"environment/#development-environment","text":"Index Install requirements Code style Build API and UI Sync API and UI The development environment can be prepared on a Fedora or CentOS 7 machine. Follow these steps: prepare the environment do your modification to API or UI sync your modification to the server where cockpit is running","title":"Development environment"},{"location":"environment/#install-requirements","text":"Prepare the development environment: Install developer tools: npm and git On Fedora: dnf install npm git On CentOS: yum install npm git Clone the repository: git clone git@github.com:NethServer/nethserver-cockpit Enter inside the cloned repository and install all ui dependencies: cd nethserver-cockpit/ui npm install npm run dev","title":"Install requirements"},{"location":"environment/#build-ui","text":"Enter UI directory and build using npm : cd ui/ ./prep-sources","title":"Build UI"},{"location":"environment/#sync-api-and-ui","text":"Files can be copied using rsync. While UI could be synced without executing the build task each time, make sure API is always built before sync. Use the following commands: ssh root @192.168.1.20 mkdir -p ~/.local/share/cockpit/nethserver cd api / rsync - avz -- delete . /* root@192.168.1.20:/usr/libexec/nethserver/api/ cd ui/ rsync -avz --delete dist/* root@192.168.1.20:/usr/share/cockpit/nethserver/","title":"Sync API and UI"},{"location":"environment/#code-style","text":"Please use configuration from EditorConfig: http://editorconfig.org","title":"Code style"},{"location":"tutorial/","text":"Tutorial This document describes how to create a new application from scratch. A NethServer Cockpit module is composed by 5 parts: UI: a mix of HTML and CSS which presents data loaded using JavaScript (Cockpit API or NethServer API) API: a list of helpers to do actions: read - validate - update Package files: manifest and RPM spec file to create an installable package Translation files (optional) An applicatin manifest Install required tools Let's assume you've already prepared your own development environment . git clone git@github.com:NethServer/nethserver-cockpit-empty.git your-own-module cd your-own-module . \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 read \u2502 \u251c\u2500\u2500 update \u2502 \u2514\u2500\u2500 validate \u251c\u2500\u2500 COPYING \u251c\u2500\u2500 createlinks \u251c\u2500\u2500 nethserver-cockpit-empty.json \u251c\u2500\u2500 nethserver-cockpit-empty.spec \u251c\u2500\u2500 prep-sources \u251c\u2500\u2500 README.md \u2514\u2500\u2500 ui \u251c\u2500\u2500 css \u2502 \u2514\u2500\u2500 style.css \u251c\u2500\u2500 dev \u2502 \u251c\u2500\u2500 cockpit.min.js \u2502 \u251c\u2500\u2500 jquery.min.js \u2502 \u2514\u2500\u2500 patternfly.css \u251c\u2500\u2500 i18n \u2502 \u251c\u2500\u2500 lang.js \u2502 \u2514\u2500\u2500 locale-en.json \u251c\u2500\u2500 index.html \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 app.js \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 sammy.js \u2502 \u2514\u2500\u2500 sammy.template.js \u251c\u2500\u2500 logo.png \u251c\u2500\u2500 manifest.json \u251c\u2500\u2500 override.json \u2514\u2500\u2500 views \u251c\u2500\u2500 about.html \u251c\u2500\u2500 dashboard.html \u251c\u2500\u2500 item1.html \u2514\u2500\u2500 logs.html 8 directories, 26 files Build NethServer provides a set of tool for building RPMs under CentOS or Fedora. Prepare the build environment , then create the RPM for your module: Change occurencies Sobsitute all nethserver-cockpit-empty and NethServer Cockpit Empty occurencies with your-own-module and Your Own Module , to check all occurencies: grep -Rn nethserver-cockpit-empty * grep -Rn NethServer Cockpit Empty * Rename also nethserver-cockpit-empty-json and nethserver-cockpit-empty-spec with your-own-module.json and your-own-module.spec . Build the module: ./prep-sources make-rpms your-own-module.spec Then you have rpm builded inside the directory, install it, inside NethServer machine with scp your - own - module - x . y . z - t . ns7 . noarch . rpm root @192.168.1.20 : ssh root @192.168.1.20 yum install your - own - module - x . y . z - t . ns7 . noarch . rpm You can see the module in action by accessing Cockpit: https:// your_server :9090 , in the Applications section. If some JavaScript or HTML part doesn't load correctly, execute: systemctl restart cockpit Customize Edit all application metadata inside the manifest: your-own-module.json It's now time to start implementing some nice feature, you just need to know HTML, CSS and some JavaScript basics: there is no need to learn a new framework, use whatever you like. The source code must be placed inside the app directory: index.html : main HTML template, contains the navbar left menu with 3 base sections: Dashboard Item 1 (can be customizable) Logs About css/style.css : application stylesheet, customize your custom CSS but always follow UI guidelines js/app.js : JavaScript logic goes here. If you need to develop complex API, take a loot to API guidelines views/*.html : contains views for each routes defined in app.js You can ignore manifest.json and override.json files which are used for Cockpit internals (change only name inside with your-own-module ). The module UI will be installed inside /usr/share/cockpit/ project directory. The module API will be installed inside /usr/libexec/nethserver/api/ project directory. Metadata will be copied inside /usr/share/nethserver/applications directory. A new application card named as your project will be added to the Applications page. JavaScript frameworks The module provides a very small and easy routing system and javascipt API but in case you really want to pick a JavaScript framework, just include it inside index.html . AngularJS (https://angularjs.org/): html ng-app ... script src= https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js /script Vue (https://vuejs.org/): script src= https://unpkg.com/vue /script React (https://reactjs.org/): script crossorigin src = https://unpkg.com/react@16/umd/react.production.min.js / script script crossorigin src = https://unpkg.com/react-dom@16/umd/react-dom.production.min.js / script Save your work The code should always be kept under a version control system for tracking changes. NethServer build system assumes you're using git , so commit everything on a git repository: git init git add * git commit -a -m First import Always consider to share your code, take a look at GitHub .","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This document describes how to create a new application from scratch. A NethServer Cockpit module is composed by 5 parts: UI: a mix of HTML and CSS which presents data loaded using JavaScript (Cockpit API or NethServer API) API: a list of helpers to do actions: read - validate - update Package files: manifest and RPM spec file to create an installable package Translation files (optional) An applicatin manifest","title":"Tutorial"},{"location":"tutorial/#install-required-tools","text":"Let's assume you've already prepared your own development environment . git clone git@github.com:NethServer/nethserver-cockpit-empty.git your-own-module cd your-own-module . \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 read \u2502 \u251c\u2500\u2500 update \u2502 \u2514\u2500\u2500 validate \u251c\u2500\u2500 COPYING \u251c\u2500\u2500 createlinks \u251c\u2500\u2500 nethserver-cockpit-empty.json \u251c\u2500\u2500 nethserver-cockpit-empty.spec \u251c\u2500\u2500 prep-sources \u251c\u2500\u2500 README.md \u2514\u2500\u2500 ui \u251c\u2500\u2500 css \u2502 \u2514\u2500\u2500 style.css \u251c\u2500\u2500 dev \u2502 \u251c\u2500\u2500 cockpit.min.js \u2502 \u251c\u2500\u2500 jquery.min.js \u2502 \u2514\u2500\u2500 patternfly.css \u251c\u2500\u2500 i18n \u2502 \u251c\u2500\u2500 lang.js \u2502 \u2514\u2500\u2500 locale-en.json \u251c\u2500\u2500 index.html \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 app.js \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 sammy.js \u2502 \u2514\u2500\u2500 sammy.template.js \u251c\u2500\u2500 logo.png \u251c\u2500\u2500 manifest.json \u251c\u2500\u2500 override.json \u2514\u2500\u2500 views \u251c\u2500\u2500 about.html \u251c\u2500\u2500 dashboard.html \u251c\u2500\u2500 item1.html \u2514\u2500\u2500 logs.html 8 directories, 26 files","title":"Install required tools"},{"location":"tutorial/#build","text":"NethServer provides a set of tool for building RPMs under CentOS or Fedora. Prepare the build environment , then create the RPM for your module:","title":"Build"},{"location":"tutorial/#change-occurencies","text":"Sobsitute all nethserver-cockpit-empty and NethServer Cockpit Empty occurencies with your-own-module and Your Own Module , to check all occurencies: grep -Rn nethserver-cockpit-empty * grep -Rn NethServer Cockpit Empty * Rename also nethserver-cockpit-empty-json and nethserver-cockpit-empty-spec with your-own-module.json and your-own-module.spec .","title":"Change occurencies"},{"location":"tutorial/#build-the-module","text":"./prep-sources make-rpms your-own-module.spec Then you have rpm builded inside the directory, install it, inside NethServer machine with scp your - own - module - x . y . z - t . ns7 . noarch . rpm root @192.168.1.20 : ssh root @192.168.1.20 yum install your - own - module - x . y . z - t . ns7 . noarch . rpm You can see the module in action by accessing Cockpit: https:// your_server :9090 , in the Applications section. If some JavaScript or HTML part doesn't load correctly, execute: systemctl restart cockpit","title":"Build the module:"},{"location":"tutorial/#customize","text":"Edit all application metadata inside the manifest: your-own-module.json It's now time to start implementing some nice feature, you just need to know HTML, CSS and some JavaScript basics: there is no need to learn a new framework, use whatever you like. The source code must be placed inside the app directory: index.html : main HTML template, contains the navbar left menu with 3 base sections: Dashboard Item 1 (can be customizable) Logs About css/style.css : application stylesheet, customize your custom CSS but always follow UI guidelines js/app.js : JavaScript logic goes here. If you need to develop complex API, take a loot to API guidelines views/*.html : contains views for each routes defined in app.js You can ignore manifest.json and override.json files which are used for Cockpit internals (change only name inside with your-own-module ). The module UI will be installed inside /usr/share/cockpit/ project directory. The module API will be installed inside /usr/libexec/nethserver/api/ project directory. Metadata will be copied inside /usr/share/nethserver/applications directory. A new application card named as your project will be added to the Applications page.","title":"Customize"},{"location":"tutorial/#javascript-frameworks","text":"The module provides a very small and easy routing system and javascipt API but in case you really want to pick a JavaScript framework, just include it inside index.html . AngularJS (https://angularjs.org/): html ng-app ... script src= https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js /script Vue (https://vuejs.org/): script src= https://unpkg.com/vue /script React (https://reactjs.org/): script crossorigin src = https://unpkg.com/react@16/umd/react.production.min.js / script script crossorigin src = https://unpkg.com/react-dom@16/umd/react-dom.production.min.js / script","title":"JavaScript frameworks"},{"location":"tutorial/#save-your-work","text":"The code should always be kept under a version control system for tracking changes. NethServer build system assumes you're using git , so commit everything on a git repository: git init git add * git commit -a -m First import Always consider to share your code, take a look at GitHub .","title":"Save your work"},{"location":"ui_guidelines/","text":"UI guidelines Index UI design Left menu Applications Forms Notifications Accessibility UI design The whole web UI is designed following PatternFly patterns. Please, read carefully PatternFly documentation before starting the design of a new web page. The main goal is to have a consistent design and behavior across all modules. All web page should guide the user to well-defined and specific task like: bad task example: \"The user must choose the correct account provider\" good task example: \"The user must choose Active Directory provider if ACLs on shared folders are a functional requirements\" Left menu The left menu should be considered fixed: modules shouldn't add items inside the left menu. When a module needs to add a new feature, the web page should be added inside exiting sections like \"System\". Applications The Applications page is a container of each new module which implements new features, like mail server, nextcloud, etc. Each new application web page should display: the status of the application status on the top a list of common actions just below the status all configuration parameters (forms, table, etc.) in the center On first run, the application must display a modal wizard if the module can't be configured with a reasonable defaults. Also the web page should display suggestions to help the user to follow best practices. For example, inside the \"Certificate page\", the interface should display a suggestion to enable Let's Encrypt if a self-signed certificate is used as default. Each application must be described by a JSON manifest inspired to AppData freedesktop.org format. Forms A configuration form should always display the minimum number of fields needed to configure the feature. Extra parameters should be hidden inside an Advanced panel with reasonable defaults. For example, when creating a user you need at least the user name, the full name and the password; but you could hide extra details like street address or phone number. Also it is a good practice to add a \"Description\" when creating records inside tables. Notifications NethServer Cockpit provides multiple toast notification . Each notification can have one of these states: success : everything is ok. Transient: it stays on the screen for 3 seconds. error : something went wrong. Not transient: it stays on the screen until the user explicitly close it. May require an action link. Finally there also is a task notification, it stays on the screen until the task has been completed. This kind of notification can be created only by signal-event . Example // success - hide notifications after 3 seconds parent . ns . $children [ 0 ]. notifications . success . show = true ; parent . ns . $children [ 0 ]. notifications . success . message = Your success message ; setTimeout ( function () { parent . ns . $children [ 0 ]. notifications . success . show = false ; }, 3000 ); // error parent . ns . $children [ 0 ]. notifications . error . show = true ; parent . ns . $children [ 0 ]. notifications . error . message = Your error message ; // event parent . ns . $children [ 0 ]. notifications . event . show = true ; parent . ns . $children [ 0 ]. notifications . event . name = Your event name ; parent . ns . $children [ 0 ]. notifications . event . message = Your action-name ; parent . ns . $children [ 0 ]. notifications . event . progress = 50 ; /* */ Call API Using Cockpit API you can easily call NethServer API or your own module API in this way: // Definition parent . ns . exec ( [ api-name / action ], // action can be: read | validate | update null , // used for input in JSON format - { key : value } null , // used for strem output, for actions the print on STDOUT function ( success ) { success = JSON . parse ( success ); return success ; }, function ( error ) { return error ; } ); // Example // define method function validate ( obj , callback ) { parent . ns . exec ( [ your-own-module/validate ], obj , null , function ( success ) { var success = JSON . parse ( success ); callback ( success ); }, function ( error , data ) { var errorData = JSON . parse ( data ); callback ( errorData ); } ); } // call it var validateObj = {} validate ( validateObj , function ( result ) { // check errors // if(result) { ... } // if no errors // update value // ... }); Modals Modal overlay should be provided any time the user needs to enter data on a form and press \"Save\" button to change system configuration. See also Modal Overlay for extra use cases. Accessibility We need to evaluate how PatternFly copes with people suffering of low vision, who need to access most features using the keyboard shortcuts.","title":"UI guidelines"},{"location":"ui_guidelines/#ui-guidelines","text":"Index UI design Left menu Applications Forms Notifications Accessibility","title":"UI guidelines"},{"location":"ui_guidelines/#ui-design","text":"The whole web UI is designed following PatternFly patterns. Please, read carefully PatternFly documentation before starting the design of a new web page. The main goal is to have a consistent design and behavior across all modules. All web page should guide the user to well-defined and specific task like: bad task example: \"The user must choose the correct account provider\" good task example: \"The user must choose Active Directory provider if ACLs on shared folders are a functional requirements\"","title":"UI design"},{"location":"ui_guidelines/#left-menu","text":"The left menu should be considered fixed: modules shouldn't add items inside the left menu. When a module needs to add a new feature, the web page should be added inside exiting sections like \"System\".","title":"Left menu"},{"location":"ui_guidelines/#applications","text":"The Applications page is a container of each new module which implements new features, like mail server, nextcloud, etc. Each new application web page should display: the status of the application status on the top a list of common actions just below the status all configuration parameters (forms, table, etc.) in the center On first run, the application must display a modal wizard if the module can't be configured with a reasonable defaults. Also the web page should display suggestions to help the user to follow best practices. For example, inside the \"Certificate page\", the interface should display a suggestion to enable Let's Encrypt if a self-signed certificate is used as default. Each application must be described by a JSON manifest inspired to AppData freedesktop.org format.","title":"Applications"},{"location":"ui_guidelines/#forms","text":"A configuration form should always display the minimum number of fields needed to configure the feature. Extra parameters should be hidden inside an Advanced panel with reasonable defaults. For example, when creating a user you need at least the user name, the full name and the password; but you could hide extra details like street address or phone number. Also it is a good practice to add a \"Description\" when creating records inside tables.","title":"Forms"},{"location":"ui_guidelines/#notifications","text":"NethServer Cockpit provides multiple toast notification . Each notification can have one of these states: success : everything is ok. Transient: it stays on the screen for 3 seconds. error : something went wrong. Not transient: it stays on the screen until the user explicitly close it. May require an action link. Finally there also is a task notification, it stays on the screen until the task has been completed. This kind of notification can be created only by signal-event .","title":"Notifications"},{"location":"ui_guidelines/#example","text":"// success - hide notifications after 3 seconds parent . ns . $children [ 0 ]. notifications . success . show = true ; parent . ns . $children [ 0 ]. notifications . success . message = Your success message ; setTimeout ( function () { parent . ns . $children [ 0 ]. notifications . success . show = false ; }, 3000 ); // error parent . ns . $children [ 0 ]. notifications . error . show = true ; parent . ns . $children [ 0 ]. notifications . error . message = Your error message ; // event parent . ns . $children [ 0 ]. notifications . event . show = true ; parent . ns . $children [ 0 ]. notifications . event . name = Your event name ; parent . ns . $children [ 0 ]. notifications . event . message = Your action-name ; parent . ns . $children [ 0 ]. notifications . event . progress = 50 ; /* */","title":"Example"},{"location":"ui_guidelines/#call-api","text":"Using Cockpit API you can easily call NethServer API or your own module API in this way: // Definition parent . ns . exec ( [ api-name / action ], // action can be: read | validate | update null , // used for input in JSON format - { key : value } null , // used for strem output, for actions the print on STDOUT function ( success ) { success = JSON . parse ( success ); return success ; }, function ( error ) { return error ; } ); // Example // define method function validate ( obj , callback ) { parent . ns . exec ( [ your-own-module/validate ], obj , null , function ( success ) { var success = JSON . parse ( success ); callback ( success ); }, function ( error , data ) { var errorData = JSON . parse ( data ); callback ( errorData ); } ); } // call it var validateObj = {} validate ( validateObj , function ( result ) { // check errors // if(result) { ... } // if no errors // update value // ... });","title":"Call API"},{"location":"ui_guidelines/#modals","text":"Modal overlay should be provided any time the user needs to enter data on a form and press \"Save\" button to change system configuration. See also Modal Overlay for extra use cases.","title":"Modals"},{"location":"ui_guidelines/#accessibility","text":"We need to evaluate how PatternFly copes with people suffering of low vision, who need to access most features using the keyboard shortcuts.","title":"Accessibility"},{"location":"api/system-accounts-provider/","text":"system-accounts-provider Configures the system accounts provider. Supported use cases are: Local AD: configure, install, uninstall, change DC IP Remote AD: configure, bind, unbind Local LDAP: install, uninstall, upgrade to AD Remote LDAP: configure, bind, unbind read Gathers information that helps to configure the system accounts provider Gives back the current system configuration A JSON input object is mandatory with this schema: { action : action } The allowed action values are described below. dump Input: { action : dump } Output: { ValidHostname : 0 , BindDN : , LdapURI : ldap://127.0.0.1 , DiscoverDcType : dns , StartTls : , port : 389 , host : 127.0.0.1 , isAD : , isLdap : , UserDN : dc=edo,dc=nethesis,dc=it , GroupDN : dc=edo,dc=nethesis,dc=it , BindPassword : , BaseDN : dc=edo,dc=nethesis,dc=it , NsdcIp : 1.2.3.4 , IsLocal : 1 , LdapUriDn : ldap:///dc%3Dedo%2Cdc%3Dnethesis%2Cdc%3Dit } See perldoc NethServer::SSSD for attributes description. The NsdcIp can be empty if local AD is not installed. The ValidHostname check if the current host name is good enough for an account provider installation. The host name is checked against myhostname system validator, also it should not contain the localhost keywork and should be at least a 3rd level domain. probel-dap Tries to contact a remote LDAP server and retrieve as much information as possible with a root DSE query. Input: { action : probe-ldap , port : 389 , server : remote.ldap.org } The port attribute is optional, can be entirely omitted or set to NULL Output: { BindDN : , LdapURI : ldap://192.168.5.59 , DiscoverDcType : dns , StartTls : 1 , port : 389 , host : 192.168.5.59 , isAD : , Provider : ldap , isLdap : 1 , UserDN : ou=People,dc=directory,dc=nh , GroupDN : ou=Groups,dc=directory,dc=nh , BindPassword : , LdapUriDn : ldap:///dc%3Dedo%2Cdc%3Dnethesis%2Cdc%3Dit , BaseDN : dc=directory,dc=nh } StartTls is a boolean condition that can be the empty string \"\" (false) or non-empty string \"1\" (true). probe-ad Input: { action : probe-ad , realm : adnethesis.it , server : 192.168.5.59 } The server attribute is optional, can be entirely omitted or set to NULL. If it has not been given, the action uses the system DNS to probe the AD configuration Ignore warnings and error messages sent to standard error, check the exit code only Output: { BindDN : user@adnethesis.it , LdapURI : ldap://w2k12.adnethesis.it , DiscoverDcType : dns , StartTls : 1 , port : 389 , host : w2k12.adnethesis.it , isAD : 1 , isLdap : , Provider : ad , UserDN : DC=adnethesis,DC=it , GroupDN : DC=adnethesis,DC=it , Realm : ADNETHESIS.IT , LdapUriDn : ldap:///dc%3Dadnethesis%2Cdc%3Dit , BaseDN : DC=adnethesis,DC=it , BindPassword : ***** } BindDN and BindPassword fields are dummy values probe-workgroup Suggest the best workgroup based on realm name. Input: { action : probeworkgroup , realm : adnethesis.it , } Output: { Workgroup : AD } default-ad Suggest Realm and NetBIOS name based on machine name. Input: { action : default-ad , } Output: { Workgroup : ADNETHSERVER , Realm : ad.adnethserver.org } validate Constraints The action must be specified inside the JSON action field. Example: { action : remote-ldap , ... } Valid actions: remote-ldap local-ad remote-ad change-ad-ip Constraints for remote-ldap : StartTls: can be enabled or disabled Credentials are validate using ldap-credentials system validator Constraints for local-ad : Realm: must be a FQDN, validated using also dcrealm system validator IpAddress: a valid free IP address, validated using also dcipaddr system validator Workgroup: a simple hostname, maximum 15 chars Constraints for change-ad-ip : - IpAddress: a valid free IP address, validated using also dcipaddr system validator Constraints for remote-ad : AdDns: must be a valid IP address or empty, checked also using ad-dns system validator AdRealm: must be a FQDN, checked also using ad-dns system validator AdUsername and AdPassword: not empty, check if credentials are valid Input remote-ldap Example: { BindDN : cn=ldapservice,dc=directory,dc=nh , LdapURI : ldaps://192.168.1.1 , DiscoverDcType : dns , StartTls : disabled , Provider : ldap , UserDN : ou=People,dc=directory,dc=nh , GroupDN : ou=Groups,dc=directory,dc=nh , BindPassword : xxxxxxxxxxxxxxxx , BaseDN : dc=directory,dc=nh , action : remoteldap } BindDN and BindPassword password can be left empty if the bind is anonymous. local-ad Input example: { action : local-ad , Realm : ad.local.neth.eu , Workgroup : LOCAL , IpAddress : 192.168.1.35 } change-ad-ip Input example: { action : change-ad-ip , IpAddress : 192.168.1.35 } remote-ad Input example: { action : remote-ad , AdRealm : adnethserver.org , AdDns : 192.168.1.1 , AdUsername : administrator@adnethserver.org , AdPassword : mypassword } update It takes an action argument, supported actions are: remove-provider local-ldap Input example: { action : remove-provider } local-ldap Install local LDAP server. Return the output of pkgaction in json format. Output example: { state : running , steps : -1 , event : Initialization } { state : running , steps : -1 , event : Resolving RPM dependencies } { state : running , steps : -1 , event : Downloading Packages } { state : running , steps : -1 , event : Downloading - lm_sensors-libs-3.4.0-4.20160601gitf9185e5.el7.x86_64.rpm } ... { state : running , steps : -1 , event : Check Package Signatures } { state : running , steps : -1 , event : Running Test Transaction } { state : running , steps : -1 , event : Running Transaction } Error example: { state : running , steps : -1 , event : Resolving RPM dependencies } { state : running , steps : -1 , event : Downloading Packages } ... { status : failed , message : [InstallError] No package(s) available to install , steps : -1 , event : null } remote-ldap Configure all the properties for remote LDAP binding, then fire nethserver-sssd-save event. remove-provider Remove the installed local account provider using nethserver-sssd-remove-provider to track the progress. local-ad Install nethserver-dc, it uses the same input from validate. Return the output of pkgaction in json format. change-ad-ip Change nsdc container IP address. remote-ad Try to join the domain, if the join fails, rollback to previous state. Output the state of all executed events and of netherver-dc package installation (see localldap for the output).","title":"system-accounts-provider"},{"location":"api/system-accounts-provider/#system-accounts-provider","text":"Configures the system accounts provider. Supported use cases are: Local AD: configure, install, uninstall, change DC IP Remote AD: configure, bind, unbind Local LDAP: install, uninstall, upgrade to AD Remote LDAP: configure, bind, unbind","title":"system-accounts-provider"},{"location":"api/system-accounts-provider/#read","text":"Gathers information that helps to configure the system accounts provider Gives back the current system configuration A JSON input object is mandatory with this schema: { action : action } The allowed action values are described below.","title":"read"},{"location":"api/system-accounts-provider/#dump","text":"Input: { action : dump } Output: { ValidHostname : 0 , BindDN : , LdapURI : ldap://127.0.0.1 , DiscoverDcType : dns , StartTls : , port : 389 , host : 127.0.0.1 , isAD : , isLdap : , UserDN : dc=edo,dc=nethesis,dc=it , GroupDN : dc=edo,dc=nethesis,dc=it , BindPassword : , BaseDN : dc=edo,dc=nethesis,dc=it , NsdcIp : 1.2.3.4 , IsLocal : 1 , LdapUriDn : ldap:///dc%3Dedo%2Cdc%3Dnethesis%2Cdc%3Dit } See perldoc NethServer::SSSD for attributes description. The NsdcIp can be empty if local AD is not installed. The ValidHostname check if the current host name is good enough for an account provider installation. The host name is checked against myhostname system validator, also it should not contain the localhost keywork and should be at least a 3rd level domain.","title":"dump"},{"location":"api/system-accounts-provider/#probel-dap","text":"Tries to contact a remote LDAP server and retrieve as much information as possible with a root DSE query. Input: { action : probe-ldap , port : 389 , server : remote.ldap.org } The port attribute is optional, can be entirely omitted or set to NULL Output: { BindDN : , LdapURI : ldap://192.168.5.59 , DiscoverDcType : dns , StartTls : 1 , port : 389 , host : 192.168.5.59 , isAD : , Provider : ldap , isLdap : 1 , UserDN : ou=People,dc=directory,dc=nh , GroupDN : ou=Groups,dc=directory,dc=nh , BindPassword : , LdapUriDn : ldap:///dc%3Dedo%2Cdc%3Dnethesis%2Cdc%3Dit , BaseDN : dc=directory,dc=nh } StartTls is a boolean condition that can be the empty string \"\" (false) or non-empty string \"1\" (true).","title":"probel-dap"},{"location":"api/system-accounts-provider/#probe-ad","text":"Input: { action : probe-ad , realm : adnethesis.it , server : 192.168.5.59 } The server attribute is optional, can be entirely omitted or set to NULL. If it has not been given, the action uses the system DNS to probe the AD configuration Ignore warnings and error messages sent to standard error, check the exit code only Output: { BindDN : user@adnethesis.it , LdapURI : ldap://w2k12.adnethesis.it , DiscoverDcType : dns , StartTls : 1 , port : 389 , host : w2k12.adnethesis.it , isAD : 1 , isLdap : , Provider : ad , UserDN : DC=adnethesis,DC=it , GroupDN : DC=adnethesis,DC=it , Realm : ADNETHESIS.IT , LdapUriDn : ldap:///dc%3Dadnethesis%2Cdc%3Dit , BaseDN : DC=adnethesis,DC=it , BindPassword : ***** } BindDN and BindPassword fields are dummy values","title":"probe-ad"},{"location":"api/system-accounts-provider/#probe-workgroup","text":"Suggest the best workgroup based on realm name. Input: { action : probeworkgroup , realm : adnethesis.it , } Output: { Workgroup : AD }","title":"probe-workgroup"},{"location":"api/system-accounts-provider/#default-ad","text":"Suggest Realm and NetBIOS name based on machine name. Input: { action : default-ad , } Output: { Workgroup : ADNETHSERVER , Realm : ad.adnethserver.org }","title":"default-ad"},{"location":"api/system-accounts-provider/#validate","text":"","title":"validate"},{"location":"api/system-accounts-provider/#constraints","text":"The action must be specified inside the JSON action field. Example: { action : remote-ldap , ... } Valid actions: remote-ldap local-ad remote-ad change-ad-ip Constraints for remote-ldap : StartTls: can be enabled or disabled Credentials are validate using ldap-credentials system validator Constraints for local-ad : Realm: must be a FQDN, validated using also dcrealm system validator IpAddress: a valid free IP address, validated using also dcipaddr system validator Workgroup: a simple hostname, maximum 15 chars Constraints for change-ad-ip : - IpAddress: a valid free IP address, validated using also dcipaddr system validator Constraints for remote-ad : AdDns: must be a valid IP address or empty, checked also using ad-dns system validator AdRealm: must be a FQDN, checked also using ad-dns system validator AdUsername and AdPassword: not empty, check if credentials are valid","title":"Constraints"},{"location":"api/system-accounts-provider/#input","text":"","title":"Input"},{"location":"api/system-accounts-provider/#remote-ldap","text":"Example: { BindDN : cn=ldapservice,dc=directory,dc=nh , LdapURI : ldaps://192.168.1.1 , DiscoverDcType : dns , StartTls : disabled , Provider : ldap , UserDN : ou=People,dc=directory,dc=nh , GroupDN : ou=Groups,dc=directory,dc=nh , BindPassword : xxxxxxxxxxxxxxxx , BaseDN : dc=directory,dc=nh , action : remoteldap } BindDN and BindPassword password can be left empty if the bind is anonymous.","title":"remote-ldap"},{"location":"api/system-accounts-provider/#local-ad","text":"Input example: { action : local-ad , Realm : ad.local.neth.eu , Workgroup : LOCAL , IpAddress : 192.168.1.35 }","title":"local-ad"},{"location":"api/system-accounts-provider/#change-ad-ip","text":"Input example: { action : change-ad-ip , IpAddress : 192.168.1.35 }","title":"change-ad-ip"},{"location":"api/system-accounts-provider/#remote-ad","text":"Input example: { action : remote-ad , AdRealm : adnethserver.org , AdDns : 192.168.1.1 , AdUsername : administrator@adnethserver.org , AdPassword : mypassword }","title":"remote-ad"},{"location":"api/system-accounts-provider/#update","text":"It takes an action argument, supported actions are: remove-provider local-ldap Input example: { action : remove-provider }","title":"update"},{"location":"api/system-accounts-provider/#local-ldap","text":"Install local LDAP server. Return the output of pkgaction in json format. Output example: { state : running , steps : -1 , event : Initialization } { state : running , steps : -1 , event : Resolving RPM dependencies } { state : running , steps : -1 , event : Downloading Packages } { state : running , steps : -1 , event : Downloading - lm_sensors-libs-3.4.0-4.20160601gitf9185e5.el7.x86_64.rpm } ... { state : running , steps : -1 , event : Check Package Signatures } { state : running , steps : -1 , event : Running Test Transaction } { state : running , steps : -1 , event : Running Transaction } Error example: { state : running , steps : -1 , event : Resolving RPM dependencies } { state : running , steps : -1 , event : Downloading Packages } ... { status : failed , message : [InstallError] No package(s) available to install , steps : -1 , event : null }","title":"local-ldap"},{"location":"api/system-accounts-provider/#remote-ldap_1","text":"Configure all the properties for remote LDAP binding, then fire nethserver-sssd-save event.","title":"remote-ldap"},{"location":"api/system-accounts-provider/#remove-provider","text":"Remove the installed local account provider using nethserver-sssd-remove-provider to track the progress.","title":"remove-provider"},{"location":"api/system-accounts-provider/#local-ad_1","text":"Install nethserver-dc, it uses the same input from validate. Return the output of pkgaction in json format.","title":"local-ad"},{"location":"api/system-accounts-provider/#change-ad-ip_1","text":"Change nsdc container IP address.","title":"change-ad-ip"},{"location":"api/system-accounts-provider/#remote-ad_1","text":"Try to join the domain, if the join fails, rollback to previous state. Output the state of all executed events and of netherver-dc package installation (see localldap for the output).","title":"remote-ad"},{"location":"api/system-aliases/","text":"system-alias Read and write system DNS system alias. read List current configured aliases. Output The configuration contains an array of alias records (type self from hosts db). Output example: { status : , configuration : [ { props : { Description : }, name : alias1.neth.loc , type : self } ] } validate Validate a collection of alias records. Constraints the alias name must be a valid FQDN Input Use the read output as input. Each record must have the type set to self , the Description field is currently not used. Example: { configuration : [ { props : { Description : }, name : test3.nethserver.org , type : self }, { props : { Description : }, name : test2.nethserver.org , type : self } ] } Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.nethserver.org , type : self }, { props :{ Description : }, name : test2.nethserver.org , type : self }]} | ./validate update All alias are destroyed and recreated on update. The helper should be invoked once, after all alias has been modified. Input The same from validate helper. Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.neth.eu , type : self }, { props :{ Description : }, name : test2.neth.eu , type : self }]} | ./update","title":"system-alias"},{"location":"api/system-aliases/#system-alias","text":"Read and write system DNS system alias.","title":"system-alias"},{"location":"api/system-aliases/#read","text":"List current configured aliases.","title":"read"},{"location":"api/system-aliases/#output","text":"The configuration contains an array of alias records (type self from hosts db). Output example: { status : , configuration : [ { props : { Description : }, name : alias1.neth.loc , type : self } ] }","title":"Output"},{"location":"api/system-aliases/#validate","text":"Validate a collection of alias records.","title":"validate"},{"location":"api/system-aliases/#constraints","text":"the alias name must be a valid FQDN","title":"Constraints"},{"location":"api/system-aliases/#input","text":"Use the read output as input. Each record must have the type set to self , the Description field is currently not used. Example: { configuration : [ { props : { Description : }, name : test3.nethserver.org , type : self }, { props : { Description : }, name : test2.nethserver.org , type : self } ] } Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.nethserver.org , type : self }, { props :{ Description : }, name : test2.nethserver.org , type : self }]} | ./validate","title":"Input"},{"location":"api/system-aliases/#update","text":"All alias are destroyed and recreated on update. The helper should be invoked once, after all alias has been modified.","title":"update"},{"location":"api/system-aliases/#input_1","text":"The same from validate helper. Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.neth.eu , type : self }, { props :{ Description : }, name : test2.neth.eu , type : self }]} | ./update","title":"Input"},{"location":"api/system-apps/","text":"system-apps Return installed NethServer apps (or modules). The response is composed by: Name Id (rpm package name) Description, Author, Summary, License, Tags, Bugs URL Repository reference Version Icon read List all available applications. Input If no input has been provided, the helper will return the list of all available applications. To retrieve a application, pass the name parameter to the read helper. Example: echo { name : nethserver-cockpit-empty } | ./read Output Example: [ { description : Very very very very very long description of NethServer Cockpit Empty , license : GPL-3.0 , tags : [ tag1 , tag2 , tag3 ], url : nethserver-cockpit-empty , author : { url : https://github.com/NethServer/nethserver-cockpit-empty , name : Author s name of NethServer Cockpit Empty , email : Author s email of NethServer Cockpit Empty }, bugs : { url : https://github.com/NethServer/dev/issues }, summary : Short description of NethServer Cockpit Empty , provides : [ nethserver-cockpit-empty ], release : { version : 1.0.0 }, icon : icon.png , homepage : https://github.com/NethServer/nethserver-cockpit-empty , id : nethserver-cockpit-empty , name : NethServer Cockpit Empty }, ... ]","title":"system-apps"},{"location":"api/system-apps/#system-apps","text":"Return installed NethServer apps (or modules). The response is composed by: Name Id (rpm package name) Description, Author, Summary, License, Tags, Bugs URL Repository reference Version Icon","title":"system-apps"},{"location":"api/system-apps/#read","text":"List all available applications.","title":"read"},{"location":"api/system-apps/#input","text":"If no input has been provided, the helper will return the list of all available applications. To retrieve a application, pass the name parameter to the read helper. Example: echo { name : nethserver-cockpit-empty } | ./read","title":"Input"},{"location":"api/system-apps/#output","text":"Example: [ { description : Very very very very very long description of NethServer Cockpit Empty , license : GPL-3.0 , tags : [ tag1 , tag2 , tag3 ], url : nethserver-cockpit-empty , author : { url : https://github.com/NethServer/nethserver-cockpit-empty , name : Author s name of NethServer Cockpit Empty , email : Author s email of NethServer Cockpit Empty }, bugs : { url : https://github.com/NethServer/dev/issues }, summary : Short description of NethServer Cockpit Empty , provides : [ nethserver-cockpit-empty ], release : { version : 1.0.0 }, icon : icon.png , homepage : https://github.com/NethServer/nethserver-cockpit-empty , id : nethserver-cockpit-empty , name : NethServer Cockpit Empty }, ... ]","title":"Output"},{"location":"api/system-authorization/","text":"system-authorization Read the list of modules accessible by the user. read Output It returns the list of enabled modules for the user. Example: { system : [ storage , disk-usage , certificates , dns , services , users-groups , network , ssh , tls-policy , trusted-networks , logs , wizard , applications , software-center ], applications : [ nethserver-nextcloud ] } validate Check if a user has access to a given module. Constraints the user must belong to a group with permission to access the module action field can be check-system or check-app Input Valid actions are listed below. check-system Check if the user can access given system module. Example: { action : check-system , name : dns } check-app Check if the user can access given application. Example: { action : check-app , name : nethserver-nextcloud }","title":"system-authorization"},{"location":"api/system-authorization/#system-authorization","text":"Read the list of modules accessible by the user.","title":"system-authorization"},{"location":"api/system-authorization/#read","text":"","title":"read"},{"location":"api/system-authorization/#output","text":"It returns the list of enabled modules for the user. Example: { system : [ storage , disk-usage , certificates , dns , services , users-groups , network , ssh , tls-policy , trusted-networks , logs , wizard , applications , software-center ], applications : [ nethserver-nextcloud ] }","title":"Output"},{"location":"api/system-authorization/#validate","text":"Check if a user has access to a given module.","title":"validate"},{"location":"api/system-authorization/#constraints","text":"the user must belong to a group with permission to access the module action field can be check-system or check-app","title":"Constraints"},{"location":"api/system-authorization/#input","text":"Valid actions are listed below.","title":"Input"},{"location":"api/system-authorization/#check-system","text":"Check if the user can access given system module. Example: { action : check-system , name : dns }","title":"check-system"},{"location":"api/system-authorization/#check-app","text":"Check if the user can access given application. Example: { action : check-app , name : nethserver-nextcloud }","title":"check-app"},{"location":"api/system-backup/","text":"system-backup Manage configuration and data backup. read Input The read API requires an action field. Valid actions: backup-info list-disks last-log running-info Example: { action : list-disks } last-log Return the content of most recent log of the given log. The name field must contain the backup name. Example: { action : last-log , name : local119 } Output backup-info The output is composed by configuration and status fields. Both fields contain backup-data and backup-config fields. Output example { status : { backup-config : [ ... { push_ts : 1539015800 , original_ts : 1539015799 , disk_ts : 1539015800 , description : @18:23 , size : 31264 , Release : final , Version : 7.5.1804 , type : cron , id : c02 , ProductName : NethServer }, ... ], backup-data : [ ... { id : local119sftp , log : /var/log/backup/backup-local119sftp-201807050800.log , last-run : 1539088300 , result : success } ... ] }, configuration : { backup-config : { HistoryLength : 3 }, backup-data : { backups : [ ... { custom-excludes : [], props : { SftpDirectory : /mnt/local119sftp , NotifyFrom : , VFSType : sftp , SftpHost : 192.168.1.119 , status : disabled , NotifyTo : root@localhost , CleanupOlderThan : default , SftpPort : 22 , Notify : error , SftpUser : root , type : rsync , BackupTime : 0 8 * * * }, custom-includes : [ /root ], name : local119sftp , type : backup } ... ], defaults : { IncludeLogs : enabled , custom-excludes : [], custom-includes : [ ... /var/spool/anacron/cron.daily ... ], excludes : [ ... /var/lib/nethserver/db , ... ], includes : [ ... /var/spool/anacron/cron.daily , ... ] } } } } Fields explanation for status section: backup-config : list of all available configuration backups backup-data : list of all executed data backup, result field can be success , fail or unknown Fields explanation for configuration section: backup-config : contains only HistoryLength , number of configuration backups to be kept backup-data : contains 2 fields backups : list of esmith records from backups database, extra fields custom-excludes and custom-includes contains the list of exclude and include from /etc/backup-data/ backup_name .exclude and /etc/backup-data/ backup_name .include defaults : list of custom-excludes , custom-includes , excludes , includes common to all backups list-disks List all disks without a mounted partition. If the disk alredy has a formatted partition, the formatted flag is set to 1, othwerise is set to 0. Example: [ { formatted : 1 , model : Flash Disk , name : sdb , partitions : [ { label : backup , fstype : ext3 , size : 2011426304 } ], size : 2013265920 , vendor : Generic } ] last-log Example: { data : Backup: local119\\nBackup started at .... } running-info It indicates if there are background jobs (restore-data or backup-data) started by the UI. Example: { restore-data : 0 , backup-data : 1 } validate Constraints The request must contain an action field. Valid actions are: create-backup-data update-backup-data update-backup-config sftp-credentials b2-credentials s3-credentials nfs-credentials cifs-credentials disk-access Constraints for create-backup-data : name: should be a unique simple identifier like a unix username status and IncludeLogs: can be enabled or disabled VFSType: can be nfs , cifs , usb , b2 , s3 , sftp engine: can be restic , duplicity or rsync Notify: can be error , always or never BackupTime: should be non-empty, a valid time for crontab (only limited validation has been implemented) Prune (only if engine is restic ): can be always or a day of week number between 0 (Sunday) and 7 (Saturday) Type (only if engine is duplicity ): can be full or incremental FullDay (only if engine is duplicity ): day of week number between 0 (Sunday) and 7 (Saturday) VolSize (only if engine is duplicity ): must be a number greater than 1 CleanupOlderThan: can be never , 7D , 14D , 28D , 56D , 168D , 364D USBLabel (only if VFSType is usb ): not empty SMBShare (only if VFSType is cifs ): not empty SMBHost (only if VFSType is cifs ): an IP or a host name SMBLogin, SMBPassword (only if VFSType is cifs ): anything NFSShare (only if VFSType is `nfs): not empty NFSHost (only if VFSType is nfs ): an IP or a host name SftpDirectory, SftpUser, SftpPassword (only if VFSType is sftp ): not empty SftpHost (only if VFSType is sftp ): an IP or a host name SftpPort (only if VFSType is sftp ): TCP port number S3AccessKey, S3Bucket, S3SecretKey, S3Host (only if VFSType is s3 ): not empty B2AccountId, B2AccountKey, B2Bucket (only if VFSType is b3 ): not empty Constraints for update-backup-data : same constraints from create-backup , but the name must be an existing record Constraints for update-backup-config : HistoryLength: integer between 1 and 32 Constraints for sftp-credentials SftpDirectory, SftpUser, SftpPassword, SftpHost, SftpPort: not empty Constraints for b2-credentials : B2AccountId, B2AccountKey, B2Bucket: not empty Constraints for s3-credentials : 3AccessKey, S3Bucket, S3SecretKey, S3Host: not empty Constraints for nfs-credentials : NFSShare: not empty NFSHost: an IP or a host name Constraints for cifs-credentials : SMBShare: not empty SMBHost: an IP or a host name SMBLogin, SMBPassword: anything Constraints for disk-access : USBLabel: not empty Input create-backup-data Example: { action : create-backup , name : test , engine : duplicity , status : enabled , Notify : error , IncludeLogs : disabled , BackupTime : 5 0 * 8 * , VFSType : nfs , SMBShare : mybackup , SMBHost : 192.168.1.1 , SMBLogin : mybackupuser , SMBPassord : password , Type : incremental , FullDay : 0 , VolSize : 250 , CleanupOlderThan : 28D } Invocation example with sftp and rsync: echo { action : create-backup-data , name : test3 , engine : rsync , status : enabled , Notify : error , IncludeLogs : disabled , BackupTime : 5 0 * 8 * , VFSType : sftp , SftpHost : 192.168.5.229 , SftpUser : root , SftpPassword : Nethesis,1234 , SftpDirectory : /tmp/test , SftpPort :22} | /usr/libexec/nethserver/api/system-backup/create update-backup-data Same as create-backup-data update-backup-config Example: { action : update-backup-config , HistoryLength : 4 } sftp-credentials Example: { action : sftp-credentials , SftpHost : my.remote.host , SftpPort : 22 , SftpUser : backupuser , SftpPassword : MyPassw0rd , SftpDirectory : /srv/backup } b2-credentials Example: { action : b2-credentials , B2AccountId : xxxxxxxxxxxxxxxxxxxxxxxxx , B2AccountKey : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx , B2Bucket : mybackup } s3-credentials Example: { action : s3-credentials , S3AccessKey : xxxxxxxxxxxxxxxxxxxx , S3Bucket : mybackup , S3SecretKey : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx , S3Host : s3.amazonaws.com } nfs-credentials Example: { action : nfs-credentials , NFSHost : 192.168.1.1 , NFSShare : /mybackup } cifs-credentials Example: { action : cifs-credentials , SMBHost : 192.168.1.1 , SMBShare : mybackup , SMBLogin : myuser , SMBPassword : mypass } disk-access Example: { action : disk-access , USBLabel : backup } update update-backup-data Use the same input from validate. update-backup-config Use the same input from validate. backup-data-contents Change include and execludes of all data backups. Input example: { action : backup-data-contents , custom-includes : [ file1 , file2 ], custom-excludes : [ file1 , file2 ], IncludeLogs : enabled } create create-backup-data Use the same input from validate. delete Available actions are: backup-config backup-data backup-config Delete the archive of given configuration backup. The name field must contain the backup id. Input example: { action : backup-config , name : c00 } backup-data Delete the configuration of given backup data. The name field must contain the backup name. Input example: { action : backup-data , name : mybackup } execute This is a special API which executes system commands and displays the raw (non-JSON) output. Available actions: format-disk run-backup-data run-backup-config download-backup-config restore-backup-config restore-backup-data Input format-disk Format the given disk. The name field must contain the disk name. Example: { action : format-disk , name : sdb } Invocation example: echo { action : format-disk , name : sdb } | /usr/libexec/nethserver/api/system-backup/execute run-backup-data Execute the given backup. The name field must contain the backup name. Example: { action : run-backup-data , name : mybackup } run-backup-config Execute a configuration backup. The name field should contain a description for the backup; the field is mandatory but can be empty. Example: { action : run-backup-config , name : mybackup } restore-backup-config Execute a configuration restore. The name field should contain the id of configuration backup to restore. The InstallPackages can be enabled or disabled . Example: { action : restore-backup-config , InstallPackages : enabled , name : c00 } restore-backup-data Execute a data restore in background using a systemd unit. The name field should contain the name of data backup to restore. Example: { action : restore-backup-data , name : mybackup } Output format-disk Raw output from paritioning and formatting tools. run-backup-data No relevant output. The backup is started using a systemd transient unit. run-backup-config No output. restore-backup-config Mimic event output. restore-backup-data No output.","title":"system-backup"},{"location":"api/system-backup/#system-backup","text":"Manage configuration and data backup.","title":"system-backup"},{"location":"api/system-backup/#read","text":"","title":"read"},{"location":"api/system-backup/#input","text":"The read API requires an action field. Valid actions: backup-info list-disks last-log running-info Example: { action : list-disks }","title":"Input"},{"location":"api/system-backup/#last-log","text":"Return the content of most recent log of the given log. The name field must contain the backup name. Example: { action : last-log , name : local119 }","title":"last-log"},{"location":"api/system-backup/#output","text":"","title":"Output"},{"location":"api/system-backup/#backup-info","text":"The output is composed by configuration and status fields. Both fields contain backup-data and backup-config fields. Output example { status : { backup-config : [ ... { push_ts : 1539015800 , original_ts : 1539015799 , disk_ts : 1539015800 , description : @18:23 , size : 31264 , Release : final , Version : 7.5.1804 , type : cron , id : c02 , ProductName : NethServer }, ... ], backup-data : [ ... { id : local119sftp , log : /var/log/backup/backup-local119sftp-201807050800.log , last-run : 1539088300 , result : success } ... ] }, configuration : { backup-config : { HistoryLength : 3 }, backup-data : { backups : [ ... { custom-excludes : [], props : { SftpDirectory : /mnt/local119sftp , NotifyFrom : , VFSType : sftp , SftpHost : 192.168.1.119 , status : disabled , NotifyTo : root@localhost , CleanupOlderThan : default , SftpPort : 22 , Notify : error , SftpUser : root , type : rsync , BackupTime : 0 8 * * * }, custom-includes : [ /root ], name : local119sftp , type : backup } ... ], defaults : { IncludeLogs : enabled , custom-excludes : [], custom-includes : [ ... /var/spool/anacron/cron.daily ... ], excludes : [ ... /var/lib/nethserver/db , ... ], includes : [ ... /var/spool/anacron/cron.daily , ... ] } } } } Fields explanation for status section: backup-config : list of all available configuration backups backup-data : list of all executed data backup, result field can be success , fail or unknown Fields explanation for configuration section: backup-config : contains only HistoryLength , number of configuration backups to be kept backup-data : contains 2 fields backups : list of esmith records from backups database, extra fields custom-excludes and custom-includes contains the list of exclude and include from /etc/backup-data/ backup_name .exclude and /etc/backup-data/ backup_name .include defaults : list of custom-excludes , custom-includes , excludes , includes common to all backups","title":"backup-info"},{"location":"api/system-backup/#list-disks","text":"List all disks without a mounted partition. If the disk alredy has a formatted partition, the formatted flag is set to 1, othwerise is set to 0. Example: [ { formatted : 1 , model : Flash Disk , name : sdb , partitions : [ { label : backup , fstype : ext3 , size : 2011426304 } ], size : 2013265920 , vendor : Generic } ]","title":"list-disks"},{"location":"api/system-backup/#last-log_1","text":"Example: { data : Backup: local119\\nBackup started at .... }","title":"last-log"},{"location":"api/system-backup/#running-info","text":"It indicates if there are background jobs (restore-data or backup-data) started by the UI. Example: { restore-data : 0 , backup-data : 1 }","title":"running-info"},{"location":"api/system-backup/#validate","text":"","title":"validate"},{"location":"api/system-backup/#constraints","text":"The request must contain an action field. Valid actions are: create-backup-data update-backup-data update-backup-config sftp-credentials b2-credentials s3-credentials nfs-credentials cifs-credentials disk-access Constraints for create-backup-data : name: should be a unique simple identifier like a unix username status and IncludeLogs: can be enabled or disabled VFSType: can be nfs , cifs , usb , b2 , s3 , sftp engine: can be restic , duplicity or rsync Notify: can be error , always or never BackupTime: should be non-empty, a valid time for crontab (only limited validation has been implemented) Prune (only if engine is restic ): can be always or a day of week number between 0 (Sunday) and 7 (Saturday) Type (only if engine is duplicity ): can be full or incremental FullDay (only if engine is duplicity ): day of week number between 0 (Sunday) and 7 (Saturday) VolSize (only if engine is duplicity ): must be a number greater than 1 CleanupOlderThan: can be never , 7D , 14D , 28D , 56D , 168D , 364D USBLabel (only if VFSType is usb ): not empty SMBShare (only if VFSType is cifs ): not empty SMBHost (only if VFSType is cifs ): an IP or a host name SMBLogin, SMBPassword (only if VFSType is cifs ): anything NFSShare (only if VFSType is `nfs): not empty NFSHost (only if VFSType is nfs ): an IP or a host name SftpDirectory, SftpUser, SftpPassword (only if VFSType is sftp ): not empty SftpHost (only if VFSType is sftp ): an IP or a host name SftpPort (only if VFSType is sftp ): TCP port number S3AccessKey, S3Bucket, S3SecretKey, S3Host (only if VFSType is s3 ): not empty B2AccountId, B2AccountKey, B2Bucket (only if VFSType is b3 ): not empty Constraints for update-backup-data : same constraints from create-backup , but the name must be an existing record Constraints for update-backup-config : HistoryLength: integer between 1 and 32 Constraints for sftp-credentials SftpDirectory, SftpUser, SftpPassword, SftpHost, SftpPort: not empty Constraints for b2-credentials : B2AccountId, B2AccountKey, B2Bucket: not empty Constraints for s3-credentials : 3AccessKey, S3Bucket, S3SecretKey, S3Host: not empty Constraints for nfs-credentials : NFSShare: not empty NFSHost: an IP or a host name Constraints for cifs-credentials : SMBShare: not empty SMBHost: an IP or a host name SMBLogin, SMBPassword: anything Constraints for disk-access : USBLabel: not empty","title":"Constraints"},{"location":"api/system-backup/#input_1","text":"","title":"Input"},{"location":"api/system-backup/#create-backup-data","text":"Example: { action : create-backup , name : test , engine : duplicity , status : enabled , Notify : error , IncludeLogs : disabled , BackupTime : 5 0 * 8 * , VFSType : nfs , SMBShare : mybackup , SMBHost : 192.168.1.1 , SMBLogin : mybackupuser , SMBPassord : password , Type : incremental , FullDay : 0 , VolSize : 250 , CleanupOlderThan : 28D } Invocation example with sftp and rsync: echo { action : create-backup-data , name : test3 , engine : rsync , status : enabled , Notify : error , IncludeLogs : disabled , BackupTime : 5 0 * 8 * , VFSType : sftp , SftpHost : 192.168.5.229 , SftpUser : root , SftpPassword : Nethesis,1234 , SftpDirectory : /tmp/test , SftpPort :22} | /usr/libexec/nethserver/api/system-backup/create","title":"create-backup-data"},{"location":"api/system-backup/#update-backup-data","text":"Same as create-backup-data","title":"update-backup-data"},{"location":"api/system-backup/#update-backup-config","text":"Example: { action : update-backup-config , HistoryLength : 4 }","title":"update-backup-config"},{"location":"api/system-backup/#sftp-credentials","text":"Example: { action : sftp-credentials , SftpHost : my.remote.host , SftpPort : 22 , SftpUser : backupuser , SftpPassword : MyPassw0rd , SftpDirectory : /srv/backup }","title":"sftp-credentials"},{"location":"api/system-backup/#b2-credentials","text":"Example: { action : b2-credentials , B2AccountId : xxxxxxxxxxxxxxxxxxxxxxxxx , B2AccountKey : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx , B2Bucket : mybackup }","title":"b2-credentials"},{"location":"api/system-backup/#s3-credentials","text":"Example: { action : s3-credentials , S3AccessKey : xxxxxxxxxxxxxxxxxxxx , S3Bucket : mybackup , S3SecretKey : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx , S3Host : s3.amazonaws.com }","title":"s3-credentials"},{"location":"api/system-backup/#nfs-credentials","text":"Example: { action : nfs-credentials , NFSHost : 192.168.1.1 , NFSShare : /mybackup }","title":"nfs-credentials"},{"location":"api/system-backup/#cifs-credentials","text":"Example: { action : cifs-credentials , SMBHost : 192.168.1.1 , SMBShare : mybackup , SMBLogin : myuser , SMBPassword : mypass }","title":"cifs-credentials"},{"location":"api/system-backup/#disk-access","text":"Example: { action : disk-access , USBLabel : backup }","title":"disk-access"},{"location":"api/system-backup/#update","text":"","title":"update"},{"location":"api/system-backup/#update-backup-data_1","text":"Use the same input from validate.","title":"update-backup-data"},{"location":"api/system-backup/#update-backup-config_1","text":"Use the same input from validate.","title":"update-backup-config"},{"location":"api/system-backup/#backup-data-contents","text":"Change include and execludes of all data backups. Input example: { action : backup-data-contents , custom-includes : [ file1 , file2 ], custom-excludes : [ file1 , file2 ], IncludeLogs : enabled }","title":"backup-data-contents"},{"location":"api/system-backup/#create","text":"","title":"create"},{"location":"api/system-backup/#create-backup-data_1","text":"Use the same input from validate.","title":"create-backup-data"},{"location":"api/system-backup/#delete","text":"Available actions are: backup-config backup-data","title":"delete"},{"location":"api/system-backup/#backup-config","text":"Delete the archive of given configuration backup. The name field must contain the backup id. Input example: { action : backup-config , name : c00 }","title":"backup-config"},{"location":"api/system-backup/#backup-data","text":"Delete the configuration of given backup data. The name field must contain the backup name. Input example: { action : backup-data , name : mybackup }","title":"backup-data"},{"location":"api/system-backup/#execute","text":"This is a special API which executes system commands and displays the raw (non-JSON) output. Available actions: format-disk run-backup-data run-backup-config download-backup-config restore-backup-config restore-backup-data","title":"execute"},{"location":"api/system-backup/#input_2","text":"","title":"Input"},{"location":"api/system-backup/#format-disk","text":"Format the given disk. The name field must contain the disk name. Example: { action : format-disk , name : sdb } Invocation example: echo { action : format-disk , name : sdb } | /usr/libexec/nethserver/api/system-backup/execute","title":"format-disk"},{"location":"api/system-backup/#run-backup-data","text":"Execute the given backup. The name field must contain the backup name. Example: { action : run-backup-data , name : mybackup }","title":"run-backup-data"},{"location":"api/system-backup/#run-backup-config","text":"Execute a configuration backup. The name field should contain a description for the backup; the field is mandatory but can be empty. Example: { action : run-backup-config , name : mybackup }","title":"run-backup-config"},{"location":"api/system-backup/#restore-backup-config","text":"Execute a configuration restore. The name field should contain the id of configuration backup to restore. The InstallPackages can be enabled or disabled . Example: { action : restore-backup-config , InstallPackages : enabled , name : c00 }","title":"restore-backup-config"},{"location":"api/system-backup/#restore-backup-data","text":"Execute a data restore in background using a systemd unit. The name field should contain the name of data backup to restore. Example: { action : restore-backup-data , name : mybackup }","title":"restore-backup-data"},{"location":"api/system-backup/#output_1","text":"","title":"Output"},{"location":"api/system-backup/#format-disk_1","text":"Raw output from paritioning and formatting tools.","title":"format-disk"},{"location":"api/system-backup/#run-backup-data_1","text":"No relevant output. The backup is started using a systemd transient unit.","title":"run-backup-data"},{"location":"api/system-backup/#run-backup-config_1","text":"No output.","title":"run-backup-config"},{"location":"api/system-backup/#restore-backup-config_1","text":"Mimic event output.","title":"restore-backup-config"},{"location":"api/system-backup/#restore-backup-data_1","text":"No output.","title":"restore-backup-data"},{"location":"api/system-certificate/","text":"system-certificate Manage system certificates. Supported operations: list certificates show certificate content configure Let's Encrypt configure self-signed certificate set default certificate read List all available certificates. Input If no input has been provided, the helper will return the list of all available certificates. To retrieve a certificate, pass the name parameter to the read helper. Example: echo { name : /etc/pki/tls/certs/NSRV.crt } | ./read Output List Internally, the helper calls /usr/libexec/nethserver/cert-list . Output current pki configuration and the list of existing certificates. If some pki properties are empty, system defaults will be used to fill the returned object. Example: { status : , configuration : { pki : { props : { LetsEncryptMail : , SubjectAltName : , KeyFile : , CrtFile : , State : , EmailAddress : , ChainFile : , Organization : , CertificateDuration : 3650 , Locality : , LetsEncryptDomains : , CommonName : , LetsEncryptRenewDays : 30 , LetsEncrypt : disabled , CountryCode : , OrganizationalUnitName : }, name : pki , type : configuration }, certificates : [ { cn : NethServer, O=Example Org, ST=SomeState, OU=Main , file : /etc/pki/tls/certs/NSRV.crt , issuer : NethServer, O=Example Org, ST=SomeState, OU=Main , default : 1 , key : /etc/pki/tls/private/NSRV.key , chain : , expiration_t : 1795129200 , expired : 0 } ] } } Certificate content Internally, the helper calls /usr/libexec/nethserver/pki-info . Output is base64 encoded: { certificate : Q2Vyd .... } validate Constraints Validate 3 different actions: lets-encrypt upload self-signed The action must be specified inside the JSON action field. Example: { action : upload , ... } Constraints for self-signed : CountryCode: empty or 2 letters State, Locality, Organization, OrganizationalUnitName, CommonName: valid x509 fields EmailAddress: empty or valid mail address SubjectAltName: comma-separated list of FQDNs Constraints for lets-encrypt : LetsEncryptMail: empty or valid mail address LetsEncryptDomains: comma-separated list of FQDNs LetsEncryptRenewDays: and integer greater than 10 and lower than 90 Check all Let's Encrypt conditions are met Constraints for upload : certificate: valid x509 certificate chain: valid x509 certificate key: valid key for running tlspolicy Input self-signed action must be set to self-signed pki record in json format Example: { props : { SubjectAltName : t1.test.net,t2.test.net , State : myState , EmailAddress : , Organization : My company , CertificateDuration : 3650 , Locality : , CommonName : , CountryCode : it , OrganizationalUnitName : }, action : self-signed } Invocation example: echo { props :{ SubjectAltName : t1.test.net,t2.test.net , State : myState , EmailAddress : , Organization : My company , CertificateDuration : 3650 , Locality : , CommonName : , CountryCode : it , OrganizationalUnitName : myoffice }, action : self-signed } | ./update lets-encrypt Manfatory fields: action must be set to lets-encrypt LetsEncryptMail LetsEncryptDomains LetsEncryptRenewDays Example: { props : { LetsEncryptMail : , LetsEncryptDomains : test.local.net , LetsEncryptRenewDays : 30 , }, action : lets-encrypt } Warning: the UI shouldn't change the LetsEncrypt field. upload Format: action must be set to upload name is mandatory and set the name for the uploaded certs certificate , key and chain must contain base64 encoded data the chain field can be empty { action : upload , files : { name : mycert , certificate : ... , key : ... , chain : ... } } update Available actions: self-signed lets-encrypt upload set-default self-signed Same input from validate. lets-encrypt Same input from validate. upload Same input from validate. set-default Mandatory fields: CrtFile , KeyFile and ChainFile . The ChainFile field can be empty. Input example: { action : set-default , props : { KeyFile : /etc/pki/tls/private/NSRV.key , CrtFile : /etc/pki/tls/certs/NSRV.crt , ChainFile : } }","title":"system-certificate"},{"location":"api/system-certificate/#system-certificate","text":"Manage system certificates. Supported operations: list certificates show certificate content configure Let's Encrypt configure self-signed certificate set default certificate","title":"system-certificate"},{"location":"api/system-certificate/#read","text":"List all available certificates.","title":"read"},{"location":"api/system-certificate/#input","text":"If no input has been provided, the helper will return the list of all available certificates. To retrieve a certificate, pass the name parameter to the read helper. Example: echo { name : /etc/pki/tls/certs/NSRV.crt } | ./read","title":"Input"},{"location":"api/system-certificate/#output","text":"","title":"Output"},{"location":"api/system-certificate/#list","text":"Internally, the helper calls /usr/libexec/nethserver/cert-list . Output current pki configuration and the list of existing certificates. If some pki properties are empty, system defaults will be used to fill the returned object. Example: { status : , configuration : { pki : { props : { LetsEncryptMail : , SubjectAltName : , KeyFile : , CrtFile : , State : , EmailAddress : , ChainFile : , Organization : , CertificateDuration : 3650 , Locality : , LetsEncryptDomains : , CommonName : , LetsEncryptRenewDays : 30 , LetsEncrypt : disabled , CountryCode : , OrganizationalUnitName : }, name : pki , type : configuration }, certificates : [ { cn : NethServer, O=Example Org, ST=SomeState, OU=Main , file : /etc/pki/tls/certs/NSRV.crt , issuer : NethServer, O=Example Org, ST=SomeState, OU=Main , default : 1 , key : /etc/pki/tls/private/NSRV.key , chain : , expiration_t : 1795129200 , expired : 0 } ] } }","title":"List"},{"location":"api/system-certificate/#certificate-content","text":"Internally, the helper calls /usr/libexec/nethserver/pki-info . Output is base64 encoded: { certificate : Q2Vyd .... }","title":"Certificate content"},{"location":"api/system-certificate/#validate","text":"","title":"validate"},{"location":"api/system-certificate/#constraints","text":"Validate 3 different actions: lets-encrypt upload self-signed The action must be specified inside the JSON action field. Example: { action : upload , ... } Constraints for self-signed : CountryCode: empty or 2 letters State, Locality, Organization, OrganizationalUnitName, CommonName: valid x509 fields EmailAddress: empty or valid mail address SubjectAltName: comma-separated list of FQDNs Constraints for lets-encrypt : LetsEncryptMail: empty or valid mail address LetsEncryptDomains: comma-separated list of FQDNs LetsEncryptRenewDays: and integer greater than 10 and lower than 90 Check all Let's Encrypt conditions are met Constraints for upload : certificate: valid x509 certificate chain: valid x509 certificate key: valid key for running tlspolicy","title":"Constraints"},{"location":"api/system-certificate/#input_1","text":"","title":"Input"},{"location":"api/system-certificate/#self-signed","text":"action must be set to self-signed pki record in json format Example: { props : { SubjectAltName : t1.test.net,t2.test.net , State : myState , EmailAddress : , Organization : My company , CertificateDuration : 3650 , Locality : , CommonName : , CountryCode : it , OrganizationalUnitName : }, action : self-signed } Invocation example: echo { props :{ SubjectAltName : t1.test.net,t2.test.net , State : myState , EmailAddress : , Organization : My company , CertificateDuration : 3650 , Locality : , CommonName : , CountryCode : it , OrganizationalUnitName : myoffice }, action : self-signed } | ./update","title":"self-signed"},{"location":"api/system-certificate/#lets-encrypt","text":"Manfatory fields: action must be set to lets-encrypt LetsEncryptMail LetsEncryptDomains LetsEncryptRenewDays Example: { props : { LetsEncryptMail : , LetsEncryptDomains : test.local.net , LetsEncryptRenewDays : 30 , }, action : lets-encrypt } Warning: the UI shouldn't change the LetsEncrypt field.","title":"lets-encrypt"},{"location":"api/system-certificate/#upload","text":"Format: action must be set to upload name is mandatory and set the name for the uploaded certs certificate , key and chain must contain base64 encoded data the chain field can be empty { action : upload , files : { name : mycert , certificate : ... , key : ... , chain : ... } }","title":"upload"},{"location":"api/system-certificate/#update","text":"Available actions: self-signed lets-encrypt upload set-default","title":"update"},{"location":"api/system-certificate/#self-signed_1","text":"Same input from validate.","title":"self-signed"},{"location":"api/system-certificate/#lets-encrypt_1","text":"Same input from validate.","title":"lets-encrypt"},{"location":"api/system-certificate/#upload_1","text":"Same input from validate.","title":"upload"},{"location":"api/system-certificate/#set-default","text":"Mandatory fields: CrtFile , KeyFile and ChainFile . The ChainFile field can be empty. Input example: { action : set-default , props : { KeyFile : /etc/pki/tls/private/NSRV.key , CrtFile : /etc/pki/tls/certs/NSRV.crt , ChainFile : } }","title":"set-default"},{"location":"api/system-company/","text":"system-company Read and set OrganizationContact record from configuration db. read Output The configuration key contains the OrganizationContact record. Output example: { status : , configuration : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration } } validate Constraints Company must not empty Input Input: an esmith db record in JSON format. Input example from: config getjson OrganizationContact : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration } update Same input from validate helper.","title":"system-company"},{"location":"api/system-company/#system-company","text":"Read and set OrganizationContact record from configuration db.","title":"system-company"},{"location":"api/system-company/#read","text":"","title":"read"},{"location":"api/system-company/#output","text":"The configuration key contains the OrganizationContact record. Output example: { status : , configuration : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration } }","title":"Output"},{"location":"api/system-company/#validate","text":"","title":"validate"},{"location":"api/system-company/#constraints","text":"Company must not empty","title":"Constraints"},{"location":"api/system-company/#input","text":"Input: an esmith db record in JSON format. Input example from: config getjson OrganizationContact : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration }","title":"Input"},{"location":"api/system-company/#update","text":"Same input from validate helper.","title":"update"},{"location":"api/system-dhcp/","text":"system-dhcp Manage DHCP configuration for DNSMasq. read Output Inside the configuration field return: reservations : all configured reservation records from the hosts ranges : the list of green and blue interfaces with relative DHCP configuration. If DHCP is not configured for an interface, the status prop is set to disabled , DhcpRangeEnd and DhcpRangeStart are set to a reasonable default. { status : [ { ip : 192.168.1.20 , mac : xx:xx:xx:xx:xx:xx , expire : 1539081950 , name : myhost , client : xxxxxxxxxxxxxxx }, ... ], configuration : { ranges : [ { name : br0 , type : range , props : { DhcpTFTP : , status : disabled , DhcpDNS : , DhcpDomain : , DhcpLeaseTime : , DhcpRangeStart : 192.168.1.1 , DhcpWINS : , DhcpRangeEnd : 192.168.1.254 , DhcpGatewayIP : , DhcpNTP : } } ], reservations : [ { name : mypc , type : local , props : { MacAddress : xx:xx:xx:xx:xx:xx , IpAddress : 192.168.1.104 , Description : My PC , type : local } }, ... ] } } validate Constraints The request must contain an action field. Valid actions are: create-reservation update-reservation Constraints for create-reservation IpAddress: must be a valid IP address MacAddress: must be a valid mac address name: muse be simple hostname all parameters are also validated against \"dhcp-reservation\" platform validator Constraints for update-reservation : name: must be unique inside the hosts db same constraints from create-reservation Constraints for update-range : name: must be an existing network interface DhcpRangeStart: a valid IP, lower than maximum range and lower than DhcpRangeEnd DhcpRangeEnd: a valid IP, greater than minimum range and greater than DhcpRangeStart DhcpLeaseTime: positive integer or empty DhcpDomain: domain or empty DhcpDNS, 'DhcpWINS, DhcpNTP, DhcpTFTP: a valid IP or empty Input create-reservation Example: { action : create-reservation , IpAddress : 192.168.1.20 , MacAddress : xx:xx:xx:xx:xx:xx , name : myhost , Description : } update-reservation Example: { action : update-reservation , IpAddress : 192.168.1.20 , MacAddress : xx:xx:xx:xx:xx:xx , name : myhost , Description : } update-range Example: { action : update-range , DhcpRangeStart : 192.168.1.10 , DhcpRangeEnd : 192.168.1.50 , name : br0 , status : enabled , DhcpGatewayIP : , DhcpLeaseTime : , DhcpDomain : , DhcpDNS : , DhcpWINS : , DhcpNTP : , DhcpTFTP : } update update-reservation Use the same input from validate. update-range Use the same input from validate. create create-reservation Use the same input from validate. delete delete-range Delete the given range. The name field must contain the interface name. Input example: { name : br0 } delete-reservation Delete the given reservation. Pass the the key to be deleted inside the name field. Example: { name : myhost }","title":"system-dhcp"},{"location":"api/system-dhcp/#system-dhcp","text":"Manage DHCP configuration for DNSMasq.","title":"system-dhcp"},{"location":"api/system-dhcp/#read","text":"","title":"read"},{"location":"api/system-dhcp/#output","text":"Inside the configuration field return: reservations : all configured reservation records from the hosts ranges : the list of green and blue interfaces with relative DHCP configuration. If DHCP is not configured for an interface, the status prop is set to disabled , DhcpRangeEnd and DhcpRangeStart are set to a reasonable default. { status : [ { ip : 192.168.1.20 , mac : xx:xx:xx:xx:xx:xx , expire : 1539081950 , name : myhost , client : xxxxxxxxxxxxxxx }, ... ], configuration : { ranges : [ { name : br0 , type : range , props : { DhcpTFTP : , status : disabled , DhcpDNS : , DhcpDomain : , DhcpLeaseTime : , DhcpRangeStart : 192.168.1.1 , DhcpWINS : , DhcpRangeEnd : 192.168.1.254 , DhcpGatewayIP : , DhcpNTP : } } ], reservations : [ { name : mypc , type : local , props : { MacAddress : xx:xx:xx:xx:xx:xx , IpAddress : 192.168.1.104 , Description : My PC , type : local } }, ... ] } }","title":"Output"},{"location":"api/system-dhcp/#validate","text":"","title":"validate"},{"location":"api/system-dhcp/#constraints","text":"The request must contain an action field. Valid actions are: create-reservation update-reservation Constraints for create-reservation IpAddress: must be a valid IP address MacAddress: must be a valid mac address name: muse be simple hostname all parameters are also validated against \"dhcp-reservation\" platform validator Constraints for update-reservation : name: must be unique inside the hosts db same constraints from create-reservation Constraints for update-range : name: must be an existing network interface DhcpRangeStart: a valid IP, lower than maximum range and lower than DhcpRangeEnd DhcpRangeEnd: a valid IP, greater than minimum range and greater than DhcpRangeStart DhcpLeaseTime: positive integer or empty DhcpDomain: domain or empty DhcpDNS, 'DhcpWINS, DhcpNTP, DhcpTFTP: a valid IP or empty","title":"Constraints"},{"location":"api/system-dhcp/#input","text":"","title":"Input"},{"location":"api/system-dhcp/#create-reservation","text":"Example: { action : create-reservation , IpAddress : 192.168.1.20 , MacAddress : xx:xx:xx:xx:xx:xx , name : myhost , Description : }","title":"create-reservation"},{"location":"api/system-dhcp/#update-reservation","text":"Example: { action : update-reservation , IpAddress : 192.168.1.20 , MacAddress : xx:xx:xx:xx:xx:xx , name : myhost , Description : }","title":"update-reservation"},{"location":"api/system-dhcp/#update-range","text":"Example: { action : update-range , DhcpRangeStart : 192.168.1.10 , DhcpRangeEnd : 192.168.1.50 , name : br0 , status : enabled , DhcpGatewayIP : , DhcpLeaseTime : , DhcpDomain : , DhcpDNS : , DhcpWINS : , DhcpNTP : , DhcpTFTP : }","title":"update-range"},{"location":"api/system-dhcp/#update","text":"","title":"update"},{"location":"api/system-dhcp/#update-reservation_1","text":"Use the same input from validate.","title":"update-reservation"},{"location":"api/system-dhcp/#update-range_1","text":"Use the same input from validate.","title":"update-range"},{"location":"api/system-dhcp/#create","text":"","title":"create"},{"location":"api/system-dhcp/#create-reservation_1","text":"Use the same input from validate.","title":"create-reservation"},{"location":"api/system-dhcp/#delete","text":"","title":"delete"},{"location":"api/system-dhcp/#delete-range","text":"Delete the given range. The name field must contain the interface name. Input example: { name : br0 }","title":"delete-range"},{"location":"api/system-dhcp/#delete-reservation","text":"Delete the given reservation. Pass the the key to be deleted inside the name field. Example: { name : myhost }","title":"delete-reservation"},{"location":"api/system-disk-usage/","text":"system-disk-usage Return disk usage statistics using duc read Output Describe JSON output here: { status : { date : 1538640638 , data : { duc : { count : 165050 , ... } } }, configuration : } update Start disk scraping. No input needed.","title":"system-disk-usage"},{"location":"api/system-disk-usage/#system-disk-usage","text":"Return disk usage statistics using duc","title":"system-disk-usage"},{"location":"api/system-disk-usage/#read","text":"","title":"read"},{"location":"api/system-disk-usage/#output","text":"Describe JSON output here: { status : { date : 1538640638 , data : { duc : { count : 165050 , ... } } }, configuration : }","title":"Output"},{"location":"api/system-disk-usage/#update","text":"Start disk scraping. No input needed.","title":"update"},{"location":"api/system-dns/","text":"system-dns Read and set upstream DNS servers for DNSMasq. read Input Return the value of NameServers record from configuration db. The record is inside the the configuration field: { status : , configuration : { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } } validate Constraints NameServers must be a comma-separated list of valid IPv4 addresses Input The NameServers record from `configuration esmith db record in JSON format. The NameServers property is a comma-separated list of IP address. It must contain at least one element. Example: { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } Validation example: echo { props :{ NameServers : 8.8.8.8 }, name : dns , type : configuration } | ./validate write Same input from validate helper.","title":"system-dns"},{"location":"api/system-dns/#system-dns","text":"Read and set upstream DNS servers for DNSMasq.","title":"system-dns"},{"location":"api/system-dns/#read","text":"","title":"read"},{"location":"api/system-dns/#input","text":"Return the value of NameServers record from configuration db. The record is inside the the configuration field: { status : , configuration : { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } }","title":"Input"},{"location":"api/system-dns/#validate","text":"","title":"validate"},{"location":"api/system-dns/#constraints","text":"NameServers must be a comma-separated list of valid IPv4 addresses","title":"Constraints"},{"location":"api/system-dns/#input_1","text":"The NameServers record from `configuration esmith db record in JSON format. The NameServers property is a comma-separated list of IP address. It must contain at least one element. Example: { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } Validation example: echo { props :{ NameServers : 8.8.8.8 }, name : dns , type : configuration } | ./validate","title":"Input"},{"location":"api/system-dns/#write","text":"Same input from validate helper.","title":"write"},{"location":"api/system-docs/","text":"system-docs Retrive online documentation and prepare it for the UI. read Input There are 3 mandatory fields: chapter nfs language Example: { chapter : backup , section : nfs , language : en } Output Output fields: link: link to the external documentation data: if section has been found, contains the html section encoded using base64 { data : PGRpdiBjb..........C9kaXY+ , link : https://nethserver-docs-cockpit.readthedocs.io/en/latest/backup.html#nfs }","title":"system-docs"},{"location":"api/system-docs/#system-docs","text":"Retrive online documentation and prepare it for the UI.","title":"system-docs"},{"location":"api/system-docs/#read","text":"","title":"read"},{"location":"api/system-docs/#input","text":"There are 3 mandatory fields: chapter nfs language Example: { chapter : backup , section : nfs , language : en }","title":"Input"},{"location":"api/system-docs/#output","text":"Output fields: link: link to the external documentation data: if section has been found, contains the html section encoded using base64 { data : PGRpdiBjb..........C9kaXY+ , link : https://nethserver-docs-cockpit.readthedocs.io/en/latest/backup.html#nfs }","title":"Output"},{"location":"api/system-hostname/","text":"system-hostname Read and the set the system hostname. read Return the system hostname. Output Example: { hostname : test.netserver.org , editable : 1 } The editable field is set to 1 if SSSD is not configured (no account provider installed). validate Constraints Must be at least a second-level domain Can't be localhost.localdomain Validate against myhostname system-validator Input Takes the same output from read: { hostname : myserver.test.local } Invocation example: echo { hostname : localhost.localdomain } | ./validate update Input Takes the same input from validate.","title":"system-hostname"},{"location":"api/system-hostname/#system-hostname","text":"Read and the set the system hostname.","title":"system-hostname"},{"location":"api/system-hostname/#read","text":"Return the system hostname.","title":"read"},{"location":"api/system-hostname/#output","text":"Example: { hostname : test.netserver.org , editable : 1 } The editable field is set to 1 if SSSD is not configured (no account provider installed).","title":"Output"},{"location":"api/system-hostname/#validate","text":"","title":"validate"},{"location":"api/system-hostname/#constraints","text":"Must be at least a second-level domain Can't be localhost.localdomain Validate against myhostname system-validator","title":"Constraints"},{"location":"api/system-hostname/#input","text":"Takes the same output from read: { hostname : myserver.test.local } Invocation example: echo { hostname : localhost.localdomain } | ./validate","title":"Input"},{"location":"api/system-hostname/#update","text":"","title":"update"},{"location":"api/system-hostname/#input_1","text":"Takes the same input from validate.","title":"Input"},{"location":"api/system-hosts/","text":"system-hosts Manage DNS records for DNSMasq. read Output Return all current configured records from the hosts file inside the status field. Return all remote records from hosts database inside the `configuration field. { status : { 127.0.0.1 : [ localhost , localhost.localdomain ], 192.168.1.2 : [ t1.net.loc ], 192.168.5.246 : [ test.local.neth.eu , test ] }, configuration : [ { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote } ] } validate Constraints The key ( name field ) must be a valid FQDN and must not already exists in case of creation WildcardMode can be enabled or disabled IpAddress must be a valid IPv4 address Input A remote host esmith db record in JSON format. The record must also contain an action fields which can be: - create for new dns record creation - update when updating and existing record Example: { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote , action : create } update Use the same input from validate. create Use the same input from validate. delete Pass the the key to be deleted inside the name field. Example: { name : my.host.com }","title":"system-hosts"},{"location":"api/system-hosts/#system-hosts","text":"Manage DNS records for DNSMasq.","title":"system-hosts"},{"location":"api/system-hosts/#read","text":"","title":"read"},{"location":"api/system-hosts/#output","text":"Return all current configured records from the hosts file inside the status field. Return all remote records from hosts database inside the `configuration field. { status : { 127.0.0.1 : [ localhost , localhost.localdomain ], 192.168.1.2 : [ t1.net.loc ], 192.168.5.246 : [ test.local.neth.eu , test ] }, configuration : [ { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote } ] }","title":"Output"},{"location":"api/system-hosts/#validate","text":"","title":"validate"},{"location":"api/system-hosts/#constraints","text":"The key ( name field ) must be a valid FQDN and must not already exists in case of creation WildcardMode can be enabled or disabled IpAddress must be a valid IPv4 address","title":"Constraints"},{"location":"api/system-hosts/#input","text":"A remote host esmith db record in JSON format. The record must also contain an action fields which can be: - create for new dns record creation - update when updating and existing record Example: { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote , action : create }","title":"Input"},{"location":"api/system-hosts/#update","text":"Use the same input from validate.","title":"update"},{"location":"api/system-hosts/#create","text":"Use the same input from validate.","title":"create"},{"location":"api/system-hosts/#delete","text":"Pass the the key to be deleted inside the name field. Example: { name : my.host.com }","title":"delete"},{"location":"api/system-openssh/","text":"system-openssh Read and write configuration for nethserver-openssh package. read Output A JSON object containing configuration and status fields: { configuration : { sshd prop }, status : { connections : list of active connections } } Output example: { configuration : { name : sshd , props : { LoginGraceTime : 2m , MaxAuthTries : 6 , PasswordAuthentication : yes , PermitRootLogin : yes , Protocol : 2 , TCPPort : 22 , UsePAM : yes , access : green,red , status : enabled }, type : service }, status : { connections : [ { local : 192.168.1.1:22 , peer : 192.168.1.45:54478 } ] } } validate Constraints PasswordAuthentication: boolean PermitRootLogin: boolean TCPPort: port number Input An Esmith db record in JSON format: { name : key , props : { prop : value ... prop : value }, type : record-type } Input example from: config getjson sshd : { name : sshd , props : { PasswordAuthentication : yes , PermitRootLogin : yes , TCPPort : 22 , }, type : service } Invocation example: echo { props :{ PasswordAuthentication : yes , PermitRootLogin : yes , TCPPort : 22 }, name : sshd , type : service } | ./validate update Same input from validate helper.","title":"system-openssh"},{"location":"api/system-openssh/#system-openssh","text":"Read and write configuration for nethserver-openssh package.","title":"system-openssh"},{"location":"api/system-openssh/#read","text":"","title":"read"},{"location":"api/system-openssh/#output","text":"A JSON object containing configuration and status fields: { configuration : { sshd prop }, status : { connections : list of active connections } } Output example: { configuration : { name : sshd , props : { LoginGraceTime : 2m , MaxAuthTries : 6 , PasswordAuthentication : yes , PermitRootLogin : yes , Protocol : 2 , TCPPort : 22 , UsePAM : yes , access : green,red , status : enabled }, type : service }, status : { connections : [ { local : 192.168.1.1:22 , peer : 192.168.1.45:54478 } ] } }","title":"Output"},{"location":"api/system-openssh/#validate","text":"","title":"validate"},{"location":"api/system-openssh/#constraints","text":"PasswordAuthentication: boolean PermitRootLogin: boolean TCPPort: port number","title":"Constraints"},{"location":"api/system-openssh/#input","text":"An Esmith db record in JSON format: { name : key , props : { prop : value ... prop : value }, type : record-type } Input example from: config getjson sshd : { name : sshd , props : { PasswordAuthentication : yes , PermitRootLogin : yes , TCPPort : 22 , }, type : service } Invocation example: echo { props :{ PasswordAuthentication : yes , PermitRootLogin : yes , TCPPort : 22 }, name : sshd , type : service } | ./validate","title":"Input"},{"location":"api/system-openssh/#update","text":"Same input from validate helper.","title":"update"},{"location":"api/system-password-policy/","text":"system-password-policy Read and set passwordstrength record from configuration db. read Output The configuration key contains the OrganizationContact record. Output example: { status : , configuration : { props : { PassExpires : no , MinPassAge : 0 , MaxPassAge : 180 , Users : no , }, name : passwordstrength , type : configuration } } validate Constraints PassExpires and Users: must be yes or no MinPassAge: minimum 0, maximum 365 MaxPassAge: positive integer Input Input: an esmith db record in JSON format. Input example from: config getjson OrganizationContact : { props : { PassExpires : no , MinPassAge : 0 , MaxPassAge : 180 , Users : no , }, name : passwordstrength , type : configuration } update Same input from validate helper.","title":"system-password-policy"},{"location":"api/system-password-policy/#system-password-policy","text":"Read and set passwordstrength record from configuration db.","title":"system-password-policy"},{"location":"api/system-password-policy/#read","text":"","title":"read"},{"location":"api/system-password-policy/#output","text":"The configuration key contains the OrganizationContact record. Output example: { status : , configuration : { props : { PassExpires : no , MinPassAge : 0 , MaxPassAge : 180 , Users : no , }, name : passwordstrength , type : configuration } }","title":"Output"},{"location":"api/system-password-policy/#validate","text":"","title":"validate"},{"location":"api/system-password-policy/#constraints","text":"PassExpires and Users: must be yes or no MinPassAge: minimum 0, maximum 365 MaxPassAge: positive integer","title":"Constraints"},{"location":"api/system-password-policy/#input","text":"Input: an esmith db record in JSON format. Input example from: config getjson OrganizationContact : { props : { PassExpires : no , MinPassAge : 0 , MaxPassAge : 180 , Users : no , }, name : passwordstrength , type : configuration }","title":"Input"},{"location":"api/system-password-policy/#update","text":"Same input from validate helper.","title":"update"},{"location":"api/system-services/","text":"system-services Get the status and control system services. read Output Current service status and preset is inside the status field. The configuration field contains all properties for each service. Example: { status : [ { status : 1 , name : chronyd , running : 1 }, { status : 1 , name : cockpit.socket , running : 1 }, ... ], configuration : [ { ports : { access : green , UDP : [ 123 ], TCP : [ 123 ] }, props : { NTPServer : pool.ntp.org }, name : chronyd , description : NTP client/server }, { ports : { access : green,red , UDP : [], TCP : [] }, props : {}, name : cockpit.socket , description : Cockpit Web Service Socket }, ... ] } update Execute actions on selected service. Available actions: stop: stop the service start: start the service restart: restart the service enable: enable and start the service disable: disable and start the service Input A JSON object with two fields: name: the service name action: the action to execute Example: { action : enable , name : httpd } Invocation example: echo { action : restart , name : httpd } | ./update","title":"system-services"},{"location":"api/system-services/#system-services","text":"Get the status and control system services.","title":"system-services"},{"location":"api/system-services/#read","text":"","title":"read"},{"location":"api/system-services/#output","text":"Current service status and preset is inside the status field. The configuration field contains all properties for each service. Example: { status : [ { status : 1 , name : chronyd , running : 1 }, { status : 1 , name : cockpit.socket , running : 1 }, ... ], configuration : [ { ports : { access : green , UDP : [ 123 ], TCP : [ 123 ] }, props : { NTPServer : pool.ntp.org }, name : chronyd , description : NTP client/server }, { ports : { access : green,red , UDP : [], TCP : [] }, props : {}, name : cockpit.socket , description : Cockpit Web Service Socket }, ... ] }","title":"Output"},{"location":"api/system-services/#update","text":"Execute actions on selected service. Available actions: stop: stop the service start: start the service restart: restart the service enable: enable and start the service disable: disable and start the service","title":"update"},{"location":"api/system-services/#input","text":"A JSON object with two fields: name: the service name action: the action to execute Example: { action : enable , name : httpd } Invocation example: echo { action : restart , name : httpd } | ./update","title":"Input"},{"location":"api/system-settings/","text":"system-settings General module to manage multiple system settings: smart host configuration mail forward cockpit configuration change user password read Read the configuration of all system settings and hints. Requires an action field. Valid actions are: settings : return all system settings hints : return the status of hints, if the user is non-root, hints are always disabled Input Input example: { action : hints } Output settings Example: { configuration : { cockpit : { LimitAccess : , access : green,red , ShowHints : enabled }, smarthost : { SmartHostPassword : , SmartHostPort : 25 , SmartHostTlsStatus : enabled , SmartHostUsername : , SmartHostName : , SmartHostStatus : disabled }, root : { SenderAddress : no-reply@nethserver.org , KeepMessageCopy : yes , EmailAddress : [] } } } hints Example: { hints : enabled } validate Requires an action parameter. Valid actions are: root cockpit smarthost hints Constraints Constraints for root action: SenderAddress: a valid mail address KeepMessageCopy: can be \"yes\" or \"no\" EmailAddress: empty or an array of valid mail addresses Constraints for cockpit action: access: can be \"green\" or \"green,red\" LimitAccess: empty or an array of valid mail IP addresses or CIDR Constraints for smarthost action: SmartHostPort: valid TCP port SmartHostTlsStatus, SmartHostStatus: can be \"enabled\" or \"disabled\" SmartHostName: an host name or IP address SmartHostPassword, SmartHostUsername: anything Constraints for hints action: ShowHints: can be \"enabled\" or \"disabled\" Input Takes the same parameters from read output plus an action field. root Input example: { action : root , SenderAddress : no-reply@nethserver.org , KeepMessageCopy : yes , EmailAddress : [ mail1@nethserver.org , mail2@nethserver.org ] } cockpit Input example: { action : cockpit , access : green,red , LimitAccess : [ 192.168.1.1 ], ShowHints : enabled } smarthost Input example: { action : smarthost , SmartHostPassword : , SmartHostPort : 25 , SmartHostTlsStatus : enabled , SmartHostUsername : , SmartHostName : mymailserver.nethserver.org , SmartHostStatus : enabled } hints Input example: { action : hints , ShowHints : enabled , } update Use same input from validate. Input Takes the same actions from validate plus the password action. root Same as validate. smarthost Same as validate. cockpit Same as validate. hints Same as validate. password Input example: { action : password , ConfirmPassword : Nethesis,1234 , NewPassword : Nethesis,1234 , CurrentPassword : Nethesis,1234 } hints Available hints: the system is using the default password cockpit port is open to the red network without IP limitations Output Example: { link : , count : 2 , details : { Password : change_default_root_password , LimitAccess : limit_red_access_by_ip }, message : null }","title":"system-settings"},{"location":"api/system-settings/#system-settings","text":"General module to manage multiple system settings: smart host configuration mail forward cockpit configuration change user password","title":"system-settings"},{"location":"api/system-settings/#read","text":"Read the configuration of all system settings and hints. Requires an action field. Valid actions are: settings : return all system settings hints : return the status of hints, if the user is non-root, hints are always disabled","title":"read"},{"location":"api/system-settings/#input","text":"Input example: { action : hints }","title":"Input"},{"location":"api/system-settings/#output","text":"","title":"Output"},{"location":"api/system-settings/#settings","text":"Example: { configuration : { cockpit : { LimitAccess : , access : green,red , ShowHints : enabled }, smarthost : { SmartHostPassword : , SmartHostPort : 25 , SmartHostTlsStatus : enabled , SmartHostUsername : , SmartHostName : , SmartHostStatus : disabled }, root : { SenderAddress : no-reply@nethserver.org , KeepMessageCopy : yes , EmailAddress : [] } } }","title":"settings"},{"location":"api/system-settings/#hints","text":"Example: { hints : enabled }","title":"hints"},{"location":"api/system-settings/#validate","text":"Requires an action parameter. Valid actions are: root cockpit smarthost hints","title":"validate"},{"location":"api/system-settings/#constraints","text":"Constraints for root action: SenderAddress: a valid mail address KeepMessageCopy: can be \"yes\" or \"no\" EmailAddress: empty or an array of valid mail addresses Constraints for cockpit action: access: can be \"green\" or \"green,red\" LimitAccess: empty or an array of valid mail IP addresses or CIDR Constraints for smarthost action: SmartHostPort: valid TCP port SmartHostTlsStatus, SmartHostStatus: can be \"enabled\" or \"disabled\" SmartHostName: an host name or IP address SmartHostPassword, SmartHostUsername: anything Constraints for hints action: ShowHints: can be \"enabled\" or \"disabled\"","title":"Constraints"},{"location":"api/system-settings/#input_1","text":"Takes the same parameters from read output plus an action field.","title":"Input"},{"location":"api/system-settings/#root","text":"Input example: { action : root , SenderAddress : no-reply@nethserver.org , KeepMessageCopy : yes , EmailAddress : [ mail1@nethserver.org , mail2@nethserver.org ] }","title":"root"},{"location":"api/system-settings/#cockpit","text":"Input example: { action : cockpit , access : green,red , LimitAccess : [ 192.168.1.1 ], ShowHints : enabled }","title":"cockpit"},{"location":"api/system-settings/#smarthost","text":"Input example: { action : smarthost , SmartHostPassword : , SmartHostPort : 25 , SmartHostTlsStatus : enabled , SmartHostUsername : , SmartHostName : mymailserver.nethserver.org , SmartHostStatus : enabled }","title":"smarthost"},{"location":"api/system-settings/#hints_1","text":"Input example: { action : hints , ShowHints : enabled , }","title":"hints"},{"location":"api/system-settings/#update","text":"Use same input from validate.","title":"update"},{"location":"api/system-settings/#input_2","text":"Takes the same actions from validate plus the password action.","title":"Input"},{"location":"api/system-settings/#root_1","text":"Same as validate.","title":"root"},{"location":"api/system-settings/#smarthost_1","text":"Same as validate.","title":"smarthost"},{"location":"api/system-settings/#cockpit_1","text":"Same as validate.","title":"cockpit"},{"location":"api/system-settings/#hints_2","text":"Same as validate.","title":"hints"},{"location":"api/system-settings/#password","text":"Input example: { action : password , ConfirmPassword : Nethesis,1234 , NewPassword : Nethesis,1234 , CurrentPassword : Nethesis,1234 }","title":"password"},{"location":"api/system-settings/#hints_3","text":"Available hints: the system is using the default password cockpit port is open to the red network without IP limitations","title":"hints"},{"location":"api/system-settings/#output_1","text":"Example: { link : , count : 2 , details : { Password : change_default_root_password , LimitAccess : limit_red_access_by_ip }, message : null }","title":"Output"},{"location":"api/system-shutdown/","text":"system-shutdown Reboot or power off the server. update Input A JSON containing an action field. Valid actions are: poweroff and reboot . Example: { action : reboot }","title":"system-shutdown"},{"location":"api/system-shutdown/#system-shutdown","text":"Reboot or power off the server.","title":"system-shutdown"},{"location":"api/system-shutdown/#update","text":"","title":"update"},{"location":"api/system-shutdown/#input","text":"A JSON containing an action field. Valid actions are: poweroff and reboot . Example: { action : reboot }","title":"Input"},{"location":"api/system-status/","text":"system-status Return various information on the server. The system status is composed by: CPU number and type kernel version memory statistics (in kB) uptime OS release load hardware vendor and product name read Output Example: { configuration : , status : { cpu : { model : Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz , n : 1 }, hardware : innotek GmbH VirtualBox , kernel : 3.10.0-693.21.1.el7.x86_64 , load : [ 0.18 , 0.06 , 0.06 ], memory : { Active : 364 , Active(anon) : 55 , Active(file) : 310 , AnonHugePages : 14 , AnonPages : 109 , Bounce : 0 , Buffers : 3 , Cached : 471 , CommitLimit : 1521 , Committed_AS : 574 , DirectMap2M : 938 , DirectMap4k : 86 , Dirty : 1 , HardwareCorrupted : 0 , HugePages_Free : 0 , HugePages_Rsvd : 0 , HugePages_Surp : 0 , HugePages_Total : 0 , Hugepagesize : 2 , Inactive : 218 , Inactive(anon) : 72 , Inactive(file) : 146 , KernelStack : 3 , Mapped : 39 , MemAvailable : 591 , MemFree : 170 , MemTotal : 993 , Mlocked : 0 , NFS_Unstable : 0 , PageTables : 18 , SReclaimable : 145 , SUnreclaim : 31 , Shmem : 18 , Slab : 176 , SwapCached : 1 , SwapFree : 1013 , SwapTotal : 1024 , Unevictable : 0 , VmallocChunk : 33554424 , VmallocTotal : 33554432 , VmallocUsed : 6 , Writeback : 0 , WritebackTmp : 0 }, release : NethServer release 7.5.1804 (final) , uptime : { days : 0 , hours : 1 , minutes : 34 , seconds : 42 } } }","title":"system-status"},{"location":"api/system-status/#system-status","text":"Return various information on the server. The system status is composed by: CPU number and type kernel version memory statistics (in kB) uptime OS release load hardware vendor and product name","title":"system-status"},{"location":"api/system-status/#read","text":"","title":"read"},{"location":"api/system-status/#output","text":"Example: { configuration : , status : { cpu : { model : Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz , n : 1 }, hardware : innotek GmbH VirtualBox , kernel : 3.10.0-693.21.1.el7.x86_64 , load : [ 0.18 , 0.06 , 0.06 ], memory : { Active : 364 , Active(anon) : 55 , Active(file) : 310 , AnonHugePages : 14 , AnonPages : 109 , Bounce : 0 , Buffers : 3 , Cached : 471 , CommitLimit : 1521 , Committed_AS : 574 , DirectMap2M : 938 , DirectMap4k : 86 , Dirty : 1 , HardwareCorrupted : 0 , HugePages_Free : 0 , HugePages_Rsvd : 0 , HugePages_Surp : 0 , HugePages_Total : 0 , Hugepagesize : 2 , Inactive : 218 , Inactive(anon) : 72 , Inactive(file) : 146 , KernelStack : 3 , Mapped : 39 , MemAvailable : 591 , MemFree : 170 , MemTotal : 993 , Mlocked : 0 , NFS_Unstable : 0 , PageTables : 18 , SReclaimable : 145 , SUnreclaim : 31 , Shmem : 18 , Slab : 176 , SwapCached : 1 , SwapFree : 1013 , SwapTotal : 1024 , Unevictable : 0 , VmallocChunk : 33554424 , VmallocTotal : 33554432 , VmallocUsed : 6 , Writeback : 0 , WritebackTmp : 0 }, release : NethServer release 7.5.1804 (final) , uptime : { days : 0 , hours : 1 , minutes : 34 , seconds : 42 } } }","title":"Output"},{"location":"api/system-task/","text":"system-task Check if there is a running event. read Output If no running tasks is found, just output: { steps : -1 , event : null , message : no running tasks } Otherwise output the following once per second, until the event has been terminated: { steps : -1 , pid : 15018 , args : arg1 arg2 , event : nethserver-event-name } If steps has value equal to -1 , the system can't determinate the progress of the running event.","title":"system-task"},{"location":"api/system-task/#system-task","text":"Check if there is a running event.","title":"system-task"},{"location":"api/system-task/#read","text":"","title":"read"},{"location":"api/system-task/#output","text":"If no running tasks is found, just output: { steps : -1 , event : null , message : no running tasks } Otherwise output the following once per second, until the event has been terminated: { steps : -1 , pid : 15018 , args : arg1 arg2 , event : nethserver-event-name } If steps has value equal to -1 , the system can't determinate the progress of the running event.","title":"Output"},{"location":"api/system-time/","text":"system-time Configure server date and time. read Return the current date and time along with chronyd configuration. If chronyd status is disabled, the time configuration is manual. Example: { status : { datetime : Wed Sep 5 15:28:59 GMT 2018 , date : 2018-09-10 , time : 10:07 }, configuration : { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , timezones : [ Africa/Abidjan , Africa/Accra , ... UTC ] } } validate Constraints chronyd and timezone field from read input if chronyd status is disabled, the keys named date and time must contain the a valid time ( HH:MM ) and date ( YYYY-MM-DD ). Input Example: { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } Invocation example: echo { chronyd :{ props :{ UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } | ./validate update Set current timezone and chronyd configuration. If chronyd is disabled, date and time is set to manual input values. Tries also to set PHP timezone (fails silently). Same input as validate helper.","title":"system-time"},{"location":"api/system-time/#system-time","text":"Configure server date and time.","title":"system-time"},{"location":"api/system-time/#read","text":"Return the current date and time along with chronyd configuration. If chronyd status is disabled, the time configuration is manual. Example: { status : { datetime : Wed Sep 5 15:28:59 GMT 2018 , date : 2018-09-10 , time : 10:07 }, configuration : { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , timezones : [ Africa/Abidjan , Africa/Accra , ... UTC ] } }","title":"read"},{"location":"api/system-time/#validate","text":"","title":"validate"},{"location":"api/system-time/#constraints","text":"chronyd and timezone field from read input if chronyd status is disabled, the keys named date and time must contain the a valid time ( HH:MM ) and date ( YYYY-MM-DD ).","title":"Constraints"},{"location":"api/system-time/#input","text":"Example: { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } Invocation example: echo { chronyd :{ props :{ UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } | ./validate","title":"Input"},{"location":"api/system-time/#update","text":"Set current timezone and chronyd configuration. If chronyd is disabled, date and time is set to manual input values. Tries also to set PHP timezone (fails silently). Same input as validate helper.","title":"update"},{"location":"api/system-tls-policy/","text":"system-tls-policy Read ans set tls configuration record. read Output The tls record is returned inside the configuration field. { status : { available : [ 20180621 , 20180330 ] }, configuration : { props : { policy : 20180621 }, name : tls , type : configuration } } validate Constraints policy must be: 20180330 , 20180621 if a custom ecda certificate is set, check if current policy supports it Input The input must be an esmith record in JSON format. Input example: { props : { policy : 20180621 }, name : tls , type : configuration } Invocation example: echo { props :{ policy : 20180621 }, name : tls , type : configuration } | ./validate update The same from validate helper.","title":"system-tls-policy"},{"location":"api/system-tls-policy/#system-tls-policy","text":"Read ans set tls configuration record.","title":"system-tls-policy"},{"location":"api/system-tls-policy/#read","text":"","title":"read"},{"location":"api/system-tls-policy/#output","text":"The tls record is returned inside the configuration field. { status : { available : [ 20180621 , 20180330 ] }, configuration : { props : { policy : 20180621 }, name : tls , type : configuration } }","title":"Output"},{"location":"api/system-tls-policy/#validate","text":"","title":"validate"},{"location":"api/system-tls-policy/#constraints","text":"policy must be: 20180330 , 20180621 if a custom ecda certificate is set, check if current policy supports it","title":"Constraints"},{"location":"api/system-tls-policy/#input","text":"The input must be an esmith record in JSON format. Input example: { props : { policy : 20180621 }, name : tls , type : configuration } Invocation example: echo { props :{ policy : 20180621 }, name : tls , type : configuration } | ./validate","title":"Input"},{"location":"api/system-tls-policy/#update","text":"The same from validate helper.","title":"update"},{"location":"api/system-trusted-networks/","text":"system-trusted-networks Manage trusted networks records from networks db. read Input Return all current configured records from /usr/libexec/nethserver/trusted-networks inside the status field. Return all network records from networks database inside the `configuration field. { status : [ { provider : green , cidr : 192.168.1.0/24 , mask : 192.168.1.0/255.255.255.0 }, { provider : networksdb , cidr : 10.0.0.0/24 , mask : 10.0.0.0/255.255.255.0 } ], configuration : [ { props : { Mask : 255.255.255.0 , Description : my trusted net }, name : 10.0.0.0 , type : network } ] } validate Constraints the key ( name field) must be a valid IPv4 address Mask must be a valid IPv4 netmask the combination of name and Mask must be a valid network the network should not be used inside the system, for example on a network interface Input A network esmith db record in JSON format. The record must also contain an action fields which can be: - create for new dns record creation - update when updating and existing record Example: { props : { Mask : 255.255.255.0 , Description : my net 11 }, name : 11.0.0.0 , type : network , action : update } update Use the same input from validate. create Use the same input from validate. delete Pass the the key to be deleted inside the name field. Example: { name : 11.0.0.0 , action : delete } Invocation example: echo { name : 11.0.0.0 , action : delete } | ./delete","title":"system-trusted-networks"},{"location":"api/system-trusted-networks/#system-trusted-networks","text":"Manage trusted networks records from networks db.","title":"system-trusted-networks"},{"location":"api/system-trusted-networks/#read","text":"","title":"read"},{"location":"api/system-trusted-networks/#input","text":"Return all current configured records from /usr/libexec/nethserver/trusted-networks inside the status field. Return all network records from networks database inside the `configuration field. { status : [ { provider : green , cidr : 192.168.1.0/24 , mask : 192.168.1.0/255.255.255.0 }, { provider : networksdb , cidr : 10.0.0.0/24 , mask : 10.0.0.0/255.255.255.0 } ], configuration : [ { props : { Mask : 255.255.255.0 , Description : my trusted net }, name : 10.0.0.0 , type : network } ] }","title":"Input"},{"location":"api/system-trusted-networks/#validate","text":"","title":"validate"},{"location":"api/system-trusted-networks/#constraints","text":"the key ( name field) must be a valid IPv4 address Mask must be a valid IPv4 netmask the combination of name and Mask must be a valid network the network should not be used inside the system, for example on a network interface","title":"Constraints"},{"location":"api/system-trusted-networks/#input_1","text":"A network esmith db record in JSON format. The record must also contain an action fields which can be: - create for new dns record creation - update when updating and existing record Example: { props : { Mask : 255.255.255.0 , Description : my net 11 }, name : 11.0.0.0 , type : network , action : update }","title":"Input"},{"location":"api/system-trusted-networks/#update","text":"Use the same input from validate.","title":"update"},{"location":"api/system-trusted-networks/#create","text":"Use the same input from validate.","title":"create"},{"location":"api/system-trusted-networks/#delete","text":"Pass the the key to be deleted inside the name field. Example: { name : 11.0.0.0 , action : delete } Invocation example: echo { name : 11.0.0.0 , action : delete } | ./delete","title":"delete"},{"location":"api/system-users/","text":"system-users Manage users and groups. Access to remote account providers is provided in read-only mode. read Input Available actions are: list-users list-groups user-membership group-members list-users Example: { action : list-users } list-groups Example: { action : list-groups } user-membership The user field is the username. Example: { action : user-membership , user : user } group-members The group fiels is the name of the group. Example: { action : group-members , group : group1 } Output list-users Return the list of users. The groups field is always empty. Example: { admin : { locked : 1 , gecos : admin , expired : 0 , groups : [], shell : /usr/libexec/openssh/sftp-server , new : 1 , expires : no }, giacomo : { locked : 0 , gecos : Test User , expired : 0 , groups : [], shell : /bin/bash , new : 0 , expires : yes } ... } list-groups Return the list of groups. The members field is always empty. Example: { administrators : { members : [] }, g1 : { members : [] } ... } user-membership Return the list of groups belonging to the user. Example: [ group1 , ... ] group-members Return the list of users inside a group. Example: [ user1 ] validate Validate user and group CRUD operations. Each validator takes and action argument. Valid actions are: user-create user-update user-delete change-password group-create group-update group-delete Constraints Users Action user-create : name: a valid Unix user name groups: empty or a list of existing groups gecos: name and surname expires: can be yes or no shell: can be /bin/bash' or '/usr/libexec/openssh/sftp-server` newPassword: if not empty, must match with confirmNewPassword; also checked agains password-strength system validator Action user-update : name: an existing user groups: empty or a list of existing groups gecos: name and surname expires: can be yes or no shell: can be /bin/bash' or '/usr/libexec/openssh/sftp-server` Action user-delete : name: check if the user can be deleted using user-delete system validator Action change-password : name: an existing user newPassword: if not empty, must match with confirmNewPassword; also checked agains password-strength system validator Groups Action group-create : name: a valid Unix user name members: empty or a list of existing users Action group-update : name: an existing group members: empty or a list of existing users Action group-delete : name: check if the user can be deleted using group-delete system validator Input user-create Example: { action : user-create , name : user1 , groups : [], gecos : First User , expires : no , shell : /bin/bash , newPassword : Nethesis,1234 , confirmNewPassword : Nethesis,1234 } user-update Example: { action : user-update , name : user1 , groups : [ group1 , group2 ], gecos : First User , expires : no , shell : /usr/libexec/openssh/sftp-server } user-delete Example: { action : user-delete , name : user1 } change-password Example: { action : change-password , newPassword : Nethesis,1234 , confirmNewPassword : Nethesis,1234 , name : user1 } group-create Example: { action : group-create , name : group2 , members : [ user1 ] } group-update Example: { action : group-updte , name : group2 , members : [ user1 , user2 ] } group-delete Example: { action : group-delete , name : root } update Use the same input from validate. Besides actions implemented inside the validate, there is also an action called toggle-lock . toggle-lock If the user is locked, unlock it. If the user is unlocked, lock it. Input example: { action : toggle-lock , name : user2 } create Use the same input from validate. delete Use the same input from validate.","title":"system-users"},{"location":"api/system-users/#system-users","text":"Manage users and groups. Access to remote account providers is provided in read-only mode.","title":"system-users"},{"location":"api/system-users/#read","text":"","title":"read"},{"location":"api/system-users/#input","text":"Available actions are: list-users list-groups user-membership group-members","title":"Input"},{"location":"api/system-users/#list-users","text":"Example: { action : list-users }","title":"list-users"},{"location":"api/system-users/#list-groups","text":"Example: { action : list-groups }","title":"list-groups"},{"location":"api/system-users/#user-membership","text":"The user field is the username. Example: { action : user-membership , user : user }","title":"user-membership"},{"location":"api/system-users/#group-members","text":"The group fiels is the name of the group. Example: { action : group-members , group : group1 }","title":"group-members"},{"location":"api/system-users/#output","text":"","title":"Output"},{"location":"api/system-users/#list-users_1","text":"Return the list of users. The groups field is always empty. Example: { admin : { locked : 1 , gecos : admin , expired : 0 , groups : [], shell : /usr/libexec/openssh/sftp-server , new : 1 , expires : no }, giacomo : { locked : 0 , gecos : Test User , expired : 0 , groups : [], shell : /bin/bash , new : 0 , expires : yes } ... }","title":"list-users"},{"location":"api/system-users/#list-groups_1","text":"Return the list of groups. The members field is always empty. Example: { administrators : { members : [] }, g1 : { members : [] } ... }","title":"list-groups"},{"location":"api/system-users/#user-membership_1","text":"Return the list of groups belonging to the user. Example: [ group1 , ... ]","title":"user-membership"},{"location":"api/system-users/#group-members_1","text":"Return the list of users inside a group. Example: [ user1 ]","title":"group-members"},{"location":"api/system-users/#validate","text":"Validate user and group CRUD operations. Each validator takes and action argument. Valid actions are: user-create user-update user-delete change-password group-create group-update group-delete","title":"validate"},{"location":"api/system-users/#constraints","text":"","title":"Constraints"},{"location":"api/system-users/#users","text":"Action user-create : name: a valid Unix user name groups: empty or a list of existing groups gecos: name and surname expires: can be yes or no shell: can be /bin/bash' or '/usr/libexec/openssh/sftp-server` newPassword: if not empty, must match with confirmNewPassword; also checked agains password-strength system validator Action user-update : name: an existing user groups: empty or a list of existing groups gecos: name and surname expires: can be yes or no shell: can be /bin/bash' or '/usr/libexec/openssh/sftp-server` Action user-delete : name: check if the user can be deleted using user-delete system validator Action change-password : name: an existing user newPassword: if not empty, must match with confirmNewPassword; also checked agains password-strength system validator","title":"Users"},{"location":"api/system-users/#groups","text":"Action group-create : name: a valid Unix user name members: empty or a list of existing users Action group-update : name: an existing group members: empty or a list of existing users Action group-delete : name: check if the user can be deleted using group-delete system validator","title":"Groups"},{"location":"api/system-users/#input_1","text":"","title":"Input"},{"location":"api/system-users/#user-create","text":"Example: { action : user-create , name : user1 , groups : [], gecos : First User , expires : no , shell : /bin/bash , newPassword : Nethesis,1234 , confirmNewPassword : Nethesis,1234 }","title":"user-create"},{"location":"api/system-users/#user-update","text":"Example: { action : user-update , name : user1 , groups : [ group1 , group2 ], gecos : First User , expires : no , shell : /usr/libexec/openssh/sftp-server }","title":"user-update"},{"location":"api/system-users/#user-delete","text":"Example: { action : user-delete , name : user1 }","title":"user-delete"},{"location":"api/system-users/#change-password","text":"Example: { action : change-password , newPassword : Nethesis,1234 , confirmNewPassword : Nethesis,1234 , name : user1 }","title":"change-password"},{"location":"api/system-users/#group-create","text":"Example: { action : group-create , name : group2 , members : [ user1 ] }","title":"group-create"},{"location":"api/system-users/#group-update","text":"Example: { action : group-updte , name : group2 , members : [ user1 , user2 ] }","title":"group-update"},{"location":"api/system-users/#group-delete","text":"Example: { action : group-delete , name : root }","title":"group-delete"},{"location":"api/system-users/#update","text":"Use the same input from validate. Besides actions implemented inside the validate, there is also an action called toggle-lock .","title":"update"},{"location":"api/system-users/#toggle-lock","text":"If the user is locked, unlock it. If the user is unlocked, lock it. Input example: { action : toggle-lock , name : user2 }","title":"toggle-lock"},{"location":"api/system-users/#create","text":"Use the same input from validate.","title":"create"},{"location":"api/system-users/#delete","text":"Use the same input from validate.","title":"delete"}]}