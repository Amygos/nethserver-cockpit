{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NethServer Cockpit developer guide This guide describes how Cockpit is used inside NethServer and how to develop a new NethServer Cockpit module. Guidelines Developer environment API guidelines UI guidelines Internationalization References Server Manager API Application manifest Build Building RPM Building documentation Create new module If you haven't used Cockpit before, be sure to check out the Cockpit Guide , as it explains Cockpit foundamentals. Once you're familiar with that process, you may proceed with this guide. To start the development of new NethServer Cockpit module: Read project Guidelines Prepare the Environment Scaffold your application","title":"Home"},{"location":"#nethserver-cockpit-developer-guide","text":"This guide describes how Cockpit is used inside NethServer and how to develop a new NethServer Cockpit module.","title":"NethServer Cockpit developer guide"},{"location":"#guidelines","text":"Developer environment API guidelines UI guidelines Internationalization","title":"Guidelines"},{"location":"#references","text":"Server Manager API Application manifest","title":"References"},{"location":"#build","text":"Building RPM Building documentation","title":"Build"},{"location":"#create-new-module","text":"If you haven't used Cockpit before, be sure to check out the Cockpit Guide , as it explains Cockpit foundamentals. Once you're familiar with that process, you may proceed with this guide. To start the development of new NethServer Cockpit module: Read project Guidelines Prepare the Environment Scaffold your application","title":"Create new module"},{"location":"api_guidelines/","text":"API guidelines Index Object format Errors API design API tests Object format Objects passed to and returned by APIs must reflect esmith db format and respect the upper/lower case notation of property names: { key: 'objKey', type: 'objType', FirstProp: 'FirstPropValue', ... } Please note that key and type field are reserved. Example Host goofy inside the hosts database. Original esmith db notation: goofy=local Description=Goofy workstation IpAddress=192.168.1.22 Equivalent JavaScript object notation: var goofy = { key: goofy , type: local , Description: Goofy workstation , IpAddress: 192.168.1.22 , } Errors If something goes wrong, APIs must throw a nethserver.Error object, which describes the error reason and possibly why the object passed to the API function caused the error. For instance: throw new nethserver.Error({ id: 1507721123244, type: 'NotValid', message: 'Generic validation error reason', attributes: { 'MyProp1': 'field-specific error reason', 'MyProp2': 'other field-specific error reason' } }); The message property should be used if an error is not caused by a specific attribute. On the other hand, there could be cases where the attributes object is empty, or undefined because the error condition does not depend on any of the attributes or attributes are not defined at all. Note that the same Error object could represent multiple failure reasons. How to generate a good id in JavaScript: + new Date() An equivalent for Bash: $ date +%s Well-known errors Well-known errors are: Validation error: NotValid throw new nethserver.Error({ id: 1507721123244, type: 'NotValid', message: 'Generic validation error reason', attributes: {'myProp': 'field-specific error reason'} }); Not found error: NotFound throw new nethserver.Error({ id: 1507721155244, type: 'NotFound', message: 'Generic validation error reason', attributes: {'key': 'field-specific error reason'} }); Task already running error (the e-smith layer can't handle multiple running events): TaskRun throw new nethserver.Error({ id: 1507721155255, type: 'TaskRun', message: 'Another task is already running' }); type ValidatorFailed : validator procedure error - the validate command failed API design Each API should always return a JavaScript promise in case of success or error. Any function which modifies system configuration must take care of semantic validation of input values, like checking if a record already exists or deny to set an option which can cause errors on other modules (eg. using the same IP address on multiple network interfaces). On success an API function returns a promise which is resolved if validation is passed and the configuration can be saved into the system. On error, the function must throw an error. It's responsability of each API function to signal an event just after returning the promise. The framework will take care to inform the user when the event task has been terminated. APIs implementing CRUD operations, should declare these types of actions: add edit delete getAll getOne Add The API developer should provide one typed add method for each record type managed by the module. Parameter : object to be addedd Example DNS module, which saves records inside the hosts database, defines two methods: addRemoteHost , addAlias . addRemoteHost: function(host) { var db = nethserver.getDatabase('configuration'); return db.open().then(function() { ... if ( //not validate ) { throw new Error( NotValid , Describe validation error here ); } ... db.setObject(obj) return db.save(); }).then(function(){ nethserver.signalEvent('event', argument); }); } Edit The API developer should provide one typed edit method for each record type managed by the module. Parameter : object to be modified Example DNS module, which saves records inside the hosts database; define two methods named editRemoteHost and editAlias . editRemoteHost: function(host) { var db = nethserver.getDatabase('hosts'); return db.open().then(function() { ... if ( //object not found ) { throw new Error( not found , Describe not found error here ); } ... db.setObject(obj) return db.save(); }).then(function(){ nethserver.signalEvent('event', argument); }); } Delete Parameter : key to be deleted Example DNS module, which saves records inside the `hosts , can define one or more methods. deleteRemoteHost: function(hostKey) { var db = nethserver.getDatabase('hosts'); return db.open().then(function() { ... if ( //object not found) { throw new Error( error , Describe not found error here ); } ... db.delete(hostKey); return db.save(); }).then(function(){ nethserver.signalEvent('host-delete', hostKey); }); }; Get all On success returns a success promise along with a list of all requested objects, on error throws an exception. The API developer should provide one typed getAll method for each record type managed by the module. Example DNS module, which saves records inside the `hosts , defines two typed methods: getAllRemoteHosts , getAllAliases . getAllRemoteHost: function() { var ret = []; var db = nethserver.getDatabase('hosts'); return db.open().then(function() { var keys = db.keys(); for (var k in keys) { var o = db.getObject(keys[k]); ... ret.push(o); } ... return ret; }); } Get one On success returns a success promise along with the requested object, on error throws an exception. Parameter : key to be retrieved. Example DNS module, which saves records inside the `hosts , can define one or methos: getOne . getOne: function(hostKey) { var db = nethserver.getDatabase('hosts'); return db.open().then(function() { return db.getObject(hostKey); }); } API tests When implementing a new API, the developer should take care of writing tests. Test should be placed undet the api/test directory. Each test is composed by two files: a js file which runs the tests an html file which displays test results Used test framework is Mocha which uses Should.js . Test can be accessed using Cockpit interface: https:// server :9090/nethserver/test- module_name Example Given a module named mymodule , create two files: test-mymodule.js test-mymodule.html Test will be accessibile at: https://myserver.mydomain.org:9090/nethserver/test-mymodule Content of test-mymodule.js : mocha.setup('bdd'); describe('nethserver.system namespace', function () { it('is defined', function() { should(typeof nethserver.system === 'object').be.ok(); }); }); describe('MyModule testCall', function(done) { return nethserver.mymodule.testCall().then(function(val) { return val.should.be.equal( abcd ); }); }); it('MyModule testCalls musth throw error', function() { nethserver.system.mymodule.testCall('wrong paramater').should.be.rejectedWith(Error); }); mocha.checkLeaks(); mocha.globals(['jQuery', 'cockpit']); mocha.run(); Content of test-mymodule.html : !doctype html html head title NethServer mymodule API test /title meta charset= utf-8 link rel= stylesheet href= mocha.css /head body div id= mocha /div script src= ../base1/jquery.min.js /script script src= ../base1/cockpit.min.js /script script src= core.js /script script src= mymodule.js /script !-- include the implementation of you module -- script src= should.js /script script src= mocha.js /script script src= test-mockup.js /script !-- avoid calling real events -- script src= test-system.js /script /body /html","title":"API guidelines"},{"location":"api_guidelines/#api-guidelines","text":"Index Object format Errors API design API tests","title":"API guidelines"},{"location":"api_guidelines/#object-format","text":"Objects passed to and returned by APIs must reflect esmith db format and respect the upper/lower case notation of property names: { key: 'objKey', type: 'objType', FirstProp: 'FirstPropValue', ... } Please note that key and type field are reserved.","title":"Object format"},{"location":"api_guidelines/#example","text":"Host goofy inside the hosts database. Original esmith db notation: goofy=local Description=Goofy workstation IpAddress=192.168.1.22 Equivalent JavaScript object notation: var goofy = { key: goofy , type: local , Description: Goofy workstation , IpAddress: 192.168.1.22 , }","title":"Example"},{"location":"api_guidelines/#errors","text":"If something goes wrong, APIs must throw a nethserver.Error object, which describes the error reason and possibly why the object passed to the API function caused the error. For instance: throw new nethserver.Error({ id: 1507721123244, type: 'NotValid', message: 'Generic validation error reason', attributes: { 'MyProp1': 'field-specific error reason', 'MyProp2': 'other field-specific error reason' } }); The message property should be used if an error is not caused by a specific attribute. On the other hand, there could be cases where the attributes object is empty, or undefined because the error condition does not depend on any of the attributes or attributes are not defined at all. Note that the same Error object could represent multiple failure reasons. How to generate a good id in JavaScript: + new Date() An equivalent for Bash: $ date +%s","title":"Errors"},{"location":"api_guidelines/#well-known-errors","text":"Well-known errors are: Validation error: NotValid throw new nethserver.Error({ id: 1507721123244, type: 'NotValid', message: 'Generic validation error reason', attributes: {'myProp': 'field-specific error reason'} }); Not found error: NotFound throw new nethserver.Error({ id: 1507721155244, type: 'NotFound', message: 'Generic validation error reason', attributes: {'key': 'field-specific error reason'} }); Task already running error (the e-smith layer can't handle multiple running events): TaskRun throw new nethserver.Error({ id: 1507721155255, type: 'TaskRun', message: 'Another task is already running' }); type ValidatorFailed : validator procedure error - the validate command failed","title":"Well-known errors"},{"location":"api_guidelines/#api-design","text":"Each API should always return a JavaScript promise in case of success or error. Any function which modifies system configuration must take care of semantic validation of input values, like checking if a record already exists or deny to set an option which can cause errors on other modules (eg. using the same IP address on multiple network interfaces). On success an API function returns a promise which is resolved if validation is passed and the configuration can be saved into the system. On error, the function must throw an error. It's responsability of each API function to signal an event just after returning the promise. The framework will take care to inform the user when the event task has been terminated. APIs implementing CRUD operations, should declare these types of actions: add edit delete getAll getOne","title":"API design"},{"location":"api_guidelines/#add","text":"The API developer should provide one typed add method for each record type managed by the module. Parameter : object to be addedd","title":"Add"},{"location":"api_guidelines/#example_1","text":"DNS module, which saves records inside the hosts database, defines two methods: addRemoteHost , addAlias . addRemoteHost: function(host) { var db = nethserver.getDatabase('configuration'); return db.open().then(function() { ... if ( //not validate ) { throw new Error( NotValid , Describe validation error here ); } ... db.setObject(obj) return db.save(); }).then(function(){ nethserver.signalEvent('event', argument); }); }","title":"Example"},{"location":"api_guidelines/#edit","text":"The API developer should provide one typed edit method for each record type managed by the module. Parameter : object to be modified","title":"Edit"},{"location":"api_guidelines/#example_2","text":"DNS module, which saves records inside the hosts database; define two methods named editRemoteHost and editAlias . editRemoteHost: function(host) { var db = nethserver.getDatabase('hosts'); return db.open().then(function() { ... if ( //object not found ) { throw new Error( not found , Describe not found error here ); } ... db.setObject(obj) return db.save(); }).then(function(){ nethserver.signalEvent('event', argument); }); }","title":"Example"},{"location":"api_guidelines/#delete","text":"Parameter : key to be deleted","title":"Delete"},{"location":"api_guidelines/#example_3","text":"DNS module, which saves records inside the `hosts , can define one or more methods. deleteRemoteHost: function(hostKey) { var db = nethserver.getDatabase('hosts'); return db.open().then(function() { ... if ( //object not found) { throw new Error( error , Describe not found error here ); } ... db.delete(hostKey); return db.save(); }).then(function(){ nethserver.signalEvent('host-delete', hostKey); }); };","title":"Example"},{"location":"api_guidelines/#get-all","text":"On success returns a success promise along with a list of all requested objects, on error throws an exception. The API developer should provide one typed getAll method for each record type managed by the module.","title":"Get all"},{"location":"api_guidelines/#example_4","text":"DNS module, which saves records inside the `hosts , defines two typed methods: getAllRemoteHosts , getAllAliases . getAllRemoteHost: function() { var ret = []; var db = nethserver.getDatabase('hosts'); return db.open().then(function() { var keys = db.keys(); for (var k in keys) { var o = db.getObject(keys[k]); ... ret.push(o); } ... return ret; }); }","title":"Example"},{"location":"api_guidelines/#get-one","text":"On success returns a success promise along with the requested object, on error throws an exception. Parameter : key to be retrieved.","title":"Get one"},{"location":"api_guidelines/#example_5","text":"DNS module, which saves records inside the `hosts , can define one or methos: getOne . getOne: function(hostKey) { var db = nethserver.getDatabase('hosts'); return db.open().then(function() { return db.getObject(hostKey); }); }","title":"Example"},{"location":"api_guidelines/#api-tests","text":"When implementing a new API, the developer should take care of writing tests. Test should be placed undet the api/test directory. Each test is composed by two files: a js file which runs the tests an html file which displays test results Used test framework is Mocha which uses Should.js . Test can be accessed using Cockpit interface: https:// server :9090/nethserver/test- module_name","title":"API tests"},{"location":"api_guidelines/#example_6","text":"Given a module named mymodule , create two files: test-mymodule.js test-mymodule.html Test will be accessibile at: https://myserver.mydomain.org:9090/nethserver/test-mymodule Content of test-mymodule.js : mocha.setup('bdd'); describe('nethserver.system namespace', function () { it('is defined', function() { should(typeof nethserver.system === 'object').be.ok(); }); }); describe('MyModule testCall', function(done) { return nethserver.mymodule.testCall().then(function(val) { return val.should.be.equal( abcd ); }); }); it('MyModule testCalls musth throw error', function() { nethserver.system.mymodule.testCall('wrong paramater').should.be.rejectedWith(Error); }); mocha.checkLeaks(); mocha.globals(['jQuery', 'cockpit']); mocha.run(); Content of test-mymodule.html : !doctype html html head title NethServer mymodule API test /title meta charset= utf-8 link rel= stylesheet href= mocha.css /head body div id= mocha /div script src= ../base1/jquery.min.js /script script src= ../base1/cockpit.min.js /script script src= core.js /script script src= mymodule.js /script !-- include the implementation of you module -- script src= should.js /script script src= mocha.js /script script src= test-mockup.js /script !-- avoid calling real events -- script src= test-system.js /script /body /html","title":"Example"},{"location":"application_manifest/","text":"Application manifest Applications are described by a JSON manifest inspired to AppData and NPM package.json formats. The manifest is used both for generating the \"Applications\" page and for a future App store. Manifest must be placed under /usr/share/cockpit/nethserver/applications directory and named with the application id like id .json ; Format id : this tag contains the unique identifier for this application (required) name : descriptive name of the application (required) summary : describe what is the purpose of the application in few words (required) description : include 2-3 paragraphs describing any important features. Each line should be an element of the array. Supports markdown format. (recommended) icon : name of the icon file; the icon should be 256x256px (recommended) screenshots : a list of screenshots; all screenshots should have a 16:9 aspect ratio, and should have a width that is no smaller than 620px (optional) url : link to local application installation. (required for web applications) homepage : this is a recommended tag for link project official site (optional) release : define the version and release date of this application (recommended) provides : list of provided RPM packages (optional) tags : list of keywords to help people discover content of the application (optional) license : license of the application, please pick one from SPDX list (recommended) bugs : the url of project's issue tracker and / or the email address to which issues should be reported (optional) author : the name of of the author with optional email and urls fields. (recommended) Images like screenshots and icons must be placed under /usr/share/cockpit/ application-id /assets directory. Example File /usr/share/cockpit/nethserver/applications/nextcloud.json : { id : nethserver-netxtcloud , name : NextCloud , summary : Share your data , description : [ Access, **share** and protect your files, calendars, contacts, communication more at home and in your enterprise. , Nextcloud puts your data at your fingertips, under your control. ], icon : icon.png , screenshots : [ { caption : Login , image : login.png }, { caption : Share data , image : data.png } ], url : /nextcloud , homepage : http://www.nextcloud.org , provides : [ nextcloud , nethserver-nextcloud ], release : { version : 12.0.2 }, tags : [ cloud , files , share ], license : GPL-3.0 , bugs : { url : https://github.com/owner/project/issues , email : project@hostname.com }, author : { name : Nextcloud , url : https://nextcloud.com , email : info@nextcloud.com } }","title":"Application manifest"},{"location":"application_manifest/#application-manifest","text":"Applications are described by a JSON manifest inspired to AppData and NPM package.json formats. The manifest is used both for generating the \"Applications\" page and for a future App store. Manifest must be placed under /usr/share/cockpit/nethserver/applications directory and named with the application id like id .json ;","title":"Application manifest"},{"location":"application_manifest/#format","text":"id : this tag contains the unique identifier for this application (required) name : descriptive name of the application (required) summary : describe what is the purpose of the application in few words (required) description : include 2-3 paragraphs describing any important features. Each line should be an element of the array. Supports markdown format. (recommended) icon : name of the icon file; the icon should be 256x256px (recommended) screenshots : a list of screenshots; all screenshots should have a 16:9 aspect ratio, and should have a width that is no smaller than 620px (optional) url : link to local application installation. (required for web applications) homepage : this is a recommended tag for link project official site (optional) release : define the version and release date of this application (recommended) provides : list of provided RPM packages (optional) tags : list of keywords to help people discover content of the application (optional) license : license of the application, please pick one from SPDX list (recommended) bugs : the url of project's issue tracker and / or the email address to which issues should be reported (optional) author : the name of of the author with optional email and urls fields. (recommended) Images like screenshots and icons must be placed under /usr/share/cockpit/ application-id /assets directory.","title":"Format"},{"location":"application_manifest/#example","text":"File /usr/share/cockpit/nethserver/applications/nextcloud.json : { id : nethserver-netxtcloud , name : NextCloud , summary : Share your data , description : [ Access, **share** and protect your files, calendars, contacts, communication more at home and in your enterprise. , Nextcloud puts your data at your fingertips, under your control. ], icon : icon.png , screenshots : [ { caption : Login , image : login.png }, { caption : Share data , image : data.png } ], url : /nextcloud , homepage : http://www.nextcloud.org , provides : [ nextcloud , nethserver-nextcloud ], release : { version : 12.0.2 }, tags : [ cloud , files , share ], license : GPL-3.0 , bugs : { url : https://github.com/owner/project/issues , email : project@hostname.com }, author : { name : Nextcloud , url : https://nextcloud.com , email : info@nextcloud.com } }","title":"Example"},{"location":"build_doc/","text":"Building documentation This guide has been built using MkDocs . Follow mkdocs installation instructions , or just use: pip install --user mkdocs mkdocs-material To serve the documentation during the development use: cd docs mkdocs serve Publish to GitHub pages To build and public the documentation directly to GitHub pages: ``` cd docs mkdocs gh-deploy","title":"Building documentation"},{"location":"build_doc/#building-documentation","text":"This guide has been built using MkDocs . Follow mkdocs installation instructions , or just use: pip install --user mkdocs mkdocs-material To serve the documentation during the development use: cd docs mkdocs serve","title":"Building documentation"},{"location":"build_doc/#publish-to-github-pages","text":"To build and public the documentation directly to GitHub pages: ``` cd docs mkdocs gh-deploy","title":"Publish to GitHub pages"},{"location":"build_rpm/","text":"Building RPM Move to the root directory of cloned repository and use standard make-rpms NethServer tool: ./prep-sources make-rpms Install RPM Copy the rpm to the NethServer Access the NethServer, then download COPR repository: wget https://copr.fedorainfracloud.org/coprs/g/cockpit/cockpit-preview/repo/epel-7/group_cockpit-cockpit-preview-epel-7.repo -O /etc/yum.repos.d/cockpit.repo yum install nethserver-cockpit*rpm","title":"Building RPM"},{"location":"build_rpm/#building-rpm","text":"Move to the root directory of cloned repository and use standard make-rpms NethServer tool: ./prep-sources make-rpms","title":"Building RPM"},{"location":"build_rpm/#install-rpm","text":"Copy the rpm to the NethServer Access the NethServer, then download COPR repository: wget https://copr.fedorainfracloud.org/coprs/g/cockpit/cockpit-preview/repo/epel-7/group_cockpit-cockpit-preview-epel-7.repo -O /etc/yum.repos.d/cockpit.repo yum install nethserver-cockpit*rpm","title":"Install RPM"},{"location":"environment/","text":"Development environment Index Install requirements Code style Build API and UI Sync API and UI The development environment can be prepared on a Fedora or CentOS 7 machine. Follow these steps: prepare the environment do your modification to API or UI sync your modification to the server where cockpit is running Install requirements Prepare the development environment: Install developer tools: npm and git On Fedora: dnf install npm git On CentOS: yum install npm git Clone the repository: git clone git@github.com:NethServer/nethserver-cockpit Install grunt globally: npm install -g grunt-cli bower generator-angular yo You can ignore warnings like this: WARN generator-angular@0.16.0 requires a peer of generator-karma@ =0.9.0 but none was installed. Enter inside the cloned repository and install all dependencies: ``` cd nethserver-cockpit/ cd api/ npm install cd .. cd ui/system/ npm install bower install ``` Build API and UI Enter API directory and build using grunt: cd api/system/ grunt build Enter UI directory and build using grunt: cd ui/ grunt build You can ignore ignore warnings like this: npm WARN api@1.0.0 No repository field. npm WARN api@1.0.0 No license field. Sync API and UI Files can be copied using rsync. While UI could be synced without executing the build task each time, make sure API is always built before sync. Use the following commands: ssh root@192.168.1.20 mkdir -p ~/.local/share/cockpit/nethserver cd api/ grunt build rsync:root@192.168.1.20 cd ui/system grunt rsync:root@192.168.1.20 Code style Please use configuration from EditorConfig: http://editorconfig.org","title":"Development environment"},{"location":"environment/#development-environment","text":"Index Install requirements Code style Build API and UI Sync API and UI The development environment can be prepared on a Fedora or CentOS 7 machine. Follow these steps: prepare the environment do your modification to API or UI sync your modification to the server where cockpit is running","title":"Development environment"},{"location":"environment/#install-requirements","text":"Prepare the development environment: Install developer tools: npm and git On Fedora: dnf install npm git On CentOS: yum install npm git Clone the repository: git clone git@github.com:NethServer/nethserver-cockpit Install grunt globally: npm install -g grunt-cli bower generator-angular yo You can ignore warnings like this: WARN generator-angular@0.16.0 requires a peer of generator-karma@ =0.9.0 but none was installed. Enter inside the cloned repository and install all dependencies: ``` cd nethserver-cockpit/ cd api/ npm install cd .. cd ui/system/ npm install bower install ```","title":"Install requirements"},{"location":"environment/#build-api-and-ui","text":"Enter API directory and build using grunt: cd api/system/ grunt build Enter UI directory and build using grunt: cd ui/ grunt build You can ignore ignore warnings like this: npm WARN api@1.0.0 No repository field. npm WARN api@1.0.0 No license field.","title":"Build API and UI"},{"location":"environment/#sync-api-and-ui","text":"Files can be copied using rsync. While UI could be synced without executing the build task each time, make sure API is always built before sync. Use the following commands: ssh root@192.168.1.20 mkdir -p ~/.local/share/cockpit/nethserver cd api/ grunt build rsync:root@192.168.1.20 cd ui/system grunt rsync:root@192.168.1.20","title":"Sync API and UI"},{"location":"environment/#code-style","text":"Please use configuration from EditorConfig: http://editorconfig.org","title":"Code style"},{"location":"new_module/","text":"How to write a new module A NethServer Cockpit module is composed by 3 main parts: Web interface: a mix of HTML and CSS which presents data loaded using JavaScript Cockpit or NethServer API Package files: manifest and RPM spec file to create an installable package Translation files (optional) To scaffold a new module use NethServer Cockpit Generator for Yeoman . Install required tools Let's assume you've already prepared your own development environment , you can now proceed by installing Yeoman and generator-nethserver-cockpit using npm : npm install -g yo npm install -g generator-nethserver-cockpit Create When scaffolding a new module, Yeoman will create the whole structure of a new NethServer Cockpit application, including all files needed for building an RPM. First, create a new directory for your project: mkdir -p nethserver-cockpit-dummy Then execute Yeoman and follow instructions on the screen specifying a meaningful project name: cd nethserver-cockpit-dummy yo nethserver-cockpit Customize Edit all application metadata inside the manifest: root/usr/share/cockpit/nethserver/applications/nethserver-cockpit-dummy.json It's now time to start implementing some nice feature, you just need to know HTML, CSS and some JavaScript basics: there is no need to learn a new framework, use whatever you like. The source code must be placed inside the app directory: index.html : main HTML template, it already contains 3 sections: module dashboard on the top application metadata on the right settings on the center styles/main.css : application stylesheet, customize your custom CSS but always follow UI guidelines scripts/app.js : JavaScript logic goes here. If you need to develop complex API, take a loot to API guidelines assets/icon.png : an icon for your application, we suggest to use a PNG image, 256 x 256 pixel You can ignore i18n/po.tpl , manifest.json and override.json files which are used for Cockpit internals. The module will be installed inside /usr/share/cockpit/ project directory. Metadata will be copied inside /usr/share/nethserver/applications directory. A new application card named as your project will be added to the \"Applications\" page. JavaScript frameworks In case you really want to pick a JavaScript framework, just include it inside index.html . The prep-sources script will do all the magic for you and include all needed dependencies. AngularJS (https://angularjs.org/): html ng-app ... script src= https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js /script Vue (https://vuejs.org/): script src= https://unpkg.com/vue /script React (https://reactjs.org/): script crossorigin src= https://unpkg.com/react@16/umd/react.production.min.js /script script crossorigin src= https://unpkg.com/react-dom@16/umd/react-dom.production.min.js /script Save your work The code should always be kept under a version control system for tracking changes. NethServer build system assumes you're using git , so commit everything on a git repository: git init git add * git commit -a -m First import Always consider to share your code, take a look at GitHub . Build and test NethServer provides a set of tool for building RPMs under CentOS or Fedora. Prepare the build environment , then create the RPM for your module: ./prep-sources make-rpms nethserver-cockpit-dummy.spec Copy the created RPM into your machine and install it to try out your new application by accessing Cockpit: https:// your_server :9090 If some JavaScript or HTML part doesn't load correctly, execute: systemctl restart cockpit","title":"How to write a new module"},{"location":"new_module/#how-to-write-a-new-module","text":"A NethServer Cockpit module is composed by 3 main parts: Web interface: a mix of HTML and CSS which presents data loaded using JavaScript Cockpit or NethServer API Package files: manifest and RPM spec file to create an installable package Translation files (optional) To scaffold a new module use NethServer Cockpit Generator for Yeoman .","title":"How to write a new module"},{"location":"new_module/#install-required-tools","text":"Let's assume you've already prepared your own development environment , you can now proceed by installing Yeoman and generator-nethserver-cockpit using npm : npm install -g yo npm install -g generator-nethserver-cockpit","title":"Install required tools"},{"location":"new_module/#create","text":"When scaffolding a new module, Yeoman will create the whole structure of a new NethServer Cockpit application, including all files needed for building an RPM. First, create a new directory for your project: mkdir -p nethserver-cockpit-dummy Then execute Yeoman and follow instructions on the screen specifying a meaningful project name: cd nethserver-cockpit-dummy yo nethserver-cockpit","title":"Create"},{"location":"new_module/#customize","text":"Edit all application metadata inside the manifest: root/usr/share/cockpit/nethserver/applications/nethserver-cockpit-dummy.json It's now time to start implementing some nice feature, you just need to know HTML, CSS and some JavaScript basics: there is no need to learn a new framework, use whatever you like. The source code must be placed inside the app directory: index.html : main HTML template, it already contains 3 sections: module dashboard on the top application metadata on the right settings on the center styles/main.css : application stylesheet, customize your custom CSS but always follow UI guidelines scripts/app.js : JavaScript logic goes here. If you need to develop complex API, take a loot to API guidelines assets/icon.png : an icon for your application, we suggest to use a PNG image, 256 x 256 pixel You can ignore i18n/po.tpl , manifest.json and override.json files which are used for Cockpit internals. The module will be installed inside /usr/share/cockpit/ project directory. Metadata will be copied inside /usr/share/nethserver/applications directory. A new application card named as your project will be added to the \"Applications\" page.","title":"Customize"},{"location":"new_module/#javascript-frameworks","text":"In case you really want to pick a JavaScript framework, just include it inside index.html . The prep-sources script will do all the magic for you and include all needed dependencies. AngularJS (https://angularjs.org/): html ng-app ... script src= https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js /script Vue (https://vuejs.org/): script src= https://unpkg.com/vue /script React (https://reactjs.org/): script crossorigin src= https://unpkg.com/react@16/umd/react.production.min.js /script script crossorigin src= https://unpkg.com/react-dom@16/umd/react-dom.production.min.js /script","title":"JavaScript frameworks"},{"location":"new_module/#save-your-work","text":"The code should always be kept under a version control system for tracking changes. NethServer build system assumes you're using git , so commit everything on a git repository: git init git add * git commit -a -m First import Always consider to share your code, take a look at GitHub .","title":"Save your work"},{"location":"new_module/#build-and-test","text":"NethServer provides a set of tool for building RPMs under CentOS or Fedora. Prepare the build environment , then create the RPM for your module: ./prep-sources make-rpms nethserver-cockpit-dummy.spec Copy the created RPM into your machine and install it to try out your new application by accessing Cockpit: https:// your_server :9090 If some JavaScript or HTML part doesn't load correctly, execute: systemctl restart cockpit","title":"Build and test"},{"location":"ui_guidelines/","text":"UI guidelines Index UI design Left menu Applications Forms Notifications Accessibility UI design The whole web UI is designed following PatternFly patterns. Please, read carefully PatternFly documentation before starting the design of a new web page. The main goal is to have a consistent design and behavior across all modules. All web page should guide the user to well-defined and specific task like: bad task example: \"The user must choose the correct account provider\" good task example: \"The user must choose Active Directory provider if ACLs on shared folders are a functional requirements\" Left menu The left menu should be considered fixed: modules shouldn't add items inside the left menu. When a module needs to add a new feature, the web page should be added inside exiting sections like \"System\". Applications The Applications page is a container of each new module which implements new features, like mail server, nextcloud, etc. Each new application web page should display: the status of the application status on the top a list of common actions just below the status all configuration parameters (forms, table, etc.) in the center On first run, the application must display a modal wizard if the module can't be configured with a reasonable defaults. Also the web page should display suggestions to help the user to follow best practices. For example, inside the \"Certificate page\", the interface should display a suggestion to enable Let's Encrypt if a self-signed certificate is used as default. Each application must be described by a JSON manifest inspired to AppData freedesktop.org format. Forms A configuration form should always display the minimum number of fields needed to configure the feature. Extra parameters should be hidden inside an Advanced panel with reasonable defaults. For example, when creating a user you need at least the user name, the full name and the password; but you could hide extra details like street address or phone number. Also it is a good practice to add a \"Description\" when creating records inside tables. Notifications NethServer Cockpit provides multiple toast notification . Each notification can have one of these states: success : everything is ok. Transient: it stays on the screen for 8 seconds. danger : something went wrong. Not transient: it stays on the screen until the user explicitly close it. May require an action link. warning : something needs attention. Not transient: it stays on the screen until the user explicitly close it. The notification can also have a type: info : display only a message action : display a message and an action link Finally there also is a task notification, it stays on the screen until the task has been completed. This kind of notification can be created only by signal-event . Example Raise a notification after 5 seconds; add this code to app.js : setTimeout(function() { nethserver.notificationMonitor.dispatchEvent('nsnotification', { type: 'action', title: 'Failed', message: 'Test failing notification', status: 'danger', action: 'Retry', method: function() { console.log( this method is called when the link is clicked! ); } }); }, 5000); Modals Modal overlay should be provided any time the user needs to enter data on a form and press \"Save\" button to change system configuration. See also Modal Overlay for extra use cases. Accessibility We need to evaluate how PatternFly copes with people suffering of low vision, who need to access most features using the keyboard shortcuts.","title":"UI guidelines"},{"location":"ui_guidelines/#ui-guidelines","text":"Index UI design Left menu Applications Forms Notifications Accessibility","title":"UI guidelines"},{"location":"ui_guidelines/#ui-design","text":"The whole web UI is designed following PatternFly patterns. Please, read carefully PatternFly documentation before starting the design of a new web page. The main goal is to have a consistent design and behavior across all modules. All web page should guide the user to well-defined and specific task like: bad task example: \"The user must choose the correct account provider\" good task example: \"The user must choose Active Directory provider if ACLs on shared folders are a functional requirements\"","title":"UI design"},{"location":"ui_guidelines/#left-menu","text":"The left menu should be considered fixed: modules shouldn't add items inside the left menu. When a module needs to add a new feature, the web page should be added inside exiting sections like \"System\".","title":"Left menu"},{"location":"ui_guidelines/#applications","text":"The Applications page is a container of each new module which implements new features, like mail server, nextcloud, etc. Each new application web page should display: the status of the application status on the top a list of common actions just below the status all configuration parameters (forms, table, etc.) in the center On first run, the application must display a modal wizard if the module can't be configured with a reasonable defaults. Also the web page should display suggestions to help the user to follow best practices. For example, inside the \"Certificate page\", the interface should display a suggestion to enable Let's Encrypt if a self-signed certificate is used as default. Each application must be described by a JSON manifest inspired to AppData freedesktop.org format.","title":"Applications"},{"location":"ui_guidelines/#forms","text":"A configuration form should always display the minimum number of fields needed to configure the feature. Extra parameters should be hidden inside an Advanced panel with reasonable defaults. For example, when creating a user you need at least the user name, the full name and the password; but you could hide extra details like street address or phone number. Also it is a good practice to add a \"Description\" when creating records inside tables.","title":"Forms"},{"location":"ui_guidelines/#notifications","text":"NethServer Cockpit provides multiple toast notification . Each notification can have one of these states: success : everything is ok. Transient: it stays on the screen for 8 seconds. danger : something went wrong. Not transient: it stays on the screen until the user explicitly close it. May require an action link. warning : something needs attention. Not transient: it stays on the screen until the user explicitly close it. The notification can also have a type: info : display only a message action : display a message and an action link Finally there also is a task notification, it stays on the screen until the task has been completed. This kind of notification can be created only by signal-event .","title":"Notifications"},{"location":"ui_guidelines/#example","text":"Raise a notification after 5 seconds; add this code to app.js : setTimeout(function() { nethserver.notificationMonitor.dispatchEvent('nsnotification', { type: 'action', title: 'Failed', message: 'Test failing notification', status: 'danger', action: 'Retry', method: function() { console.log( this method is called when the link is clicked! ); } }); }, 5000);","title":"Example"},{"location":"ui_guidelines/#modals","text":"Modal overlay should be provided any time the user needs to enter data on a form and press \"Save\" button to change system configuration. See also Modal Overlay for extra use cases.","title":"Modals"},{"location":"ui_guidelines/#accessibility","text":"We need to evaluate how PatternFly copes with people suffering of low vision, who need to access most features using the keyboard shortcuts.","title":"Accessibility"}]}